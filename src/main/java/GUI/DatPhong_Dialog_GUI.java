/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;
import ENTITY.KhachHang;
import ENTITY.NhanVien;
import ENTITY.PhieuDatPhong;
import ENTITY.Phong;
import ENTITY.TrangThaiPhong;
import DAO.DanhSachDatPhong_DAO;
import DAO.KhachHang_DAO;
import DAO.LoaiPhong_DAO;
import DAO.Phong_DAO;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalTime;
import java.util.Calendar;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import java.util.Date;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

import com.toedter.calendar.IDateEditor;

import Components.OnDatPhongListener;

/**
 *
 * @author Admin
 */
public class DatPhong_Dialog_GUI extends javax.swing.JDialog {
	public static Phong_GUI phongGUI;
    private static String maPhong;
    private Phong_DAO phongDAO = new Phong_DAO();
	
	
    private KhachHang_DAO khachHangDAO = new KhachHang_DAO();
	private String maPhong2;
	private KhachHang_GUI parentPanel;
	private DatPhong_Dialog_GUI parentPanelPhong;

    /**
     * Creates new form DatPhong_Dialog_GUI
     */
    public DatPhong_Dialog_GUI(Window parent, boolean modal, String maPhong, Phong_GUI phongGUI) {
        super();
        this.phongGUI = phongGUI;
        this.maPhong = maPhong;
        initComponents();
        setLocationRelativeTo(null);
        setDefaultDateTime();
        setDefaultDate();
        initListeners();
        initLoaiHinhListener();
        cboDSCCCD.setEditable(true); // Cho phép nhập liệu
        loadCustomerCCCDs(); // Tải danh sách CCCD vào ComboBox
        setupComboBoxListener(); // Thiết lập listener cho ComboBox
        lbMaPhong.setText(maPhong);
        addListeners();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNgayCheckIn = new com.toedter.calendar.JDateChooser();
        txtNgayCheckOut = new com.toedter.calendar.JDateChooser();
        cboLoaiHinh = new javax.swing.JComboBox<>();
        txtGioCheckIn = new javax.swing.JSpinner();
        txtGioCheckOut = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSoNguoiLon = new javax.swing.JSpinner();
        txtSoTreEm = new javax.swing.JSpinner();
        txtTienCoc = new javax.swing.JTextField();
        btnThemKH = new javax.swing.JButton();
        cboDSCCCD = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbKH = new javax.swing.JTable();
        btnDatNhanh = new javax.swing.JButton();
        btnHuy = new javax.swing.JButton();
        btnDatTruoc = new javax.swing.JButton();
        lbTongTien = new javax.swing.JLabel();
        lbMaPhong = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Đặt phòng ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Check-in");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Check-out");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Loại hình");

        txtNgayCheckIn.setDateFormatString("dd/mm/yyyy");

        txtNgayCheckOut.setDateFormatString("dd/mm/yyyy");

        cboLoaiHinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ngày đêm", "Giờ" }));
        cboLoaiHinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiHinhActionPerformed(evt);
            }
        });

        txtGioCheckIn.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));

        txtGioCheckOut.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Người lớn");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Trẻ em");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Tiền cọc");

        txtSoNguoiLon.setModel(new javax.swing.SpinnerNumberModel(1, null, null, 1));

        txtTienCoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTienCocActionPerformed(evt);
            }
        });

        btnThemKH.setBackground(new java.awt.Color(97, 217, 152));
        btnThemKH.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnThemKH.setForeground(new java.awt.Color(255, 255, 255));
        btnThemKH.setText("Thêm khách hàng");
        btnThemKH.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnThemKHMouseClicked(evt);
            }
        });
        btnThemKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemKHActionPerformed(evt);
            }
        });

        cboDSCCCD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Khách lẻ" }));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("Danh sách khách hàng");

        tbKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tên khách hàng", "Ngày sinh", "CCCD", "Số điện thoại", "Phái"
            }
        ));
        jScrollPane1.setViewportView(tbKH);

        btnDatNhanh.setBackground(new java.awt.Color(25, 159, 254));
        btnDatNhanh.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDatNhanh.setForeground(new java.awt.Color(255, 255, 255));
        btnDatNhanh.setText("Đặt nhanh");
        btnDatNhanh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDatNhanh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDatNhanhMouseClicked(evt);
            }
        });
        btnDatNhanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatNhanhActionPerformed(evt);
            }
        });

        btnHuy.setBackground(new java.awt.Color(153, 153, 153));
        btnHuy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnHuy.setText("Hủy");
        btnHuy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHuyMouseClicked(evt);
            }
        });
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        btnDatTruoc.setBackground(new java.awt.Color(245, 109, 40));
        btnDatTruoc.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDatTruoc.setForeground(new java.awt.Color(255, 255, 255));
        btnDatTruoc.setText("Đặt trước");
        btnDatTruoc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDatTruoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDatTruocMouseClicked(evt);
            }
        });
        btnDatTruoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatTruocActionPerformed(evt);
            }
        });

        lbTongTien.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbTongTien.setForeground(new java.awt.Color(255, 0, 0));
        lbTongTien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/money.png"))); // NOI18N
        lbTongTien.setText("0");

        lbMaPhong.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbMaPhong.setForeground(new java.awt.Color(255, 0, 51));
        lbMaPhong.setText("P101");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNgayCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(txtNgayCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboLoaiHinh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGioCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGioCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSoTreEm, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSoNguoiLon, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtTienCoc, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnThemKH, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboDSCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lbTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDatNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDatTruoc, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cboDSCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lbMaPhong))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtNgayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtGioCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(txtSoNguoiLon, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(txtTienCoc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtNgayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtGioCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(txtSoTreEm, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnThemKH, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cboLoaiHinh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDatNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDatTruoc, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbTongTien)
                        .addGap(41, 41, 41))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTienCocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTienCocActionPerformed
        // TODO add your handling code here:
    	calculateTotalAmount();
    }//GEN-LAST:event_txtTienCocActionPerformed

    private void btnThemKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemKHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemKHActionPerformed

    private void btnDatNhanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatNhanhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDatNhanhActionPerformed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnHuyActionPerformed

    private void btnDatTruocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatTruocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDatTruocActionPerformed

    private void btnHuyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHuyMouseClicked
       dispose();
    }//GEN-LAST:event_btnHuyMouseClicked

    private void cboLoaiHinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHinhActionPerformed
        calculateTotalAmount();
    }//GEN-LAST:event_cboLoaiHinhActionPerformed

    private void btnThemKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemKHMouseClicked
    	// TODO Auto-generated method stub
    	Window window = SwingUtilities.getWindowAncestor(this);
    	ThemKhachHangDialog_GUI dialog = new ThemKhachHangDialog_GUI(parentPanel, true);
    	dialog.setVisible(true);
    }//GEN-LAST:event_btnThemKHMouseClicked

    private void btnDatNhanhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDatNhanhMouseClicked
    	try {
    		KhachHang_DAO khachHangDAO = new KhachHang_DAO();
    		
    	    // Lấy thông tin từ giao diện
    	    String maPhong = lbMaPhong.getText();
    	    String cccdKhachHang = (String) cboDSCCCD.getSelectedItem();
    		String maKhachHang = khachHangDAO.getMaKhachHangByCCCD(cccdKhachHang);
//    	    String maNhanVienLap = "NV001"; // Ví dụ mã nhân viên, bạn có thể thay đổi hoặc lấy từ hệ thống đăng nhập
    	    java.util.Date ngayNhanPhong = txtNgayCheckIn.getDate();
    	    java.util.Date ngayTraPhong = txtNgayCheckOut.getDate();
    	    double tienCoc = txtTienCoc.getText().isEmpty() ? 0.0 : Double.parseDouble(txtTienCoc.getText());
    	    String loaiHinh = (String) cboLoaiHinh.getSelectedItem();
    	    
    	 // Chuyển đổi giờ nhận phòng và giờ trả phòng từ Date sang String
    	    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
    	    String gioNhanPhongStr = timeFormat.format((Date) txtGioCheckIn.getValue());
    	    String gioTraPhongStr = timeFormat.format((Date) txtGioCheckOut.getValue());
    	    
    	    double tongTien = lbTongTien.getText().isEmpty() ? 0.0 : Double.parseDouble(lbTongTien.getText().replace(",", ""));
    	    String trangThai = "Đã nhận"; // Trạng thái mặc định cho phiếu đặt phòng mới

    	    // Kiểm tra thông tin bắt buộc
    	    if (ngayNhanPhong == null || ngayTraPhong == null) {
    	        JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày nhận phòng và ngày trả phòng.");
    	        return;
    	    }

    	    // Tạo các đối tượng liên quan
    	    KhachHang khachHang = new KhachHang();
    	    khachHang.setMaKhachHang(maKhachHang); // Sử dụng mã khách hàng

    	    String maNhanVienLap = Login_GUI.maNhanVien; // Lấy mã nhân viên từ đăng nhập
    	    NhanVien nhanVien = new NhanVien(maNhanVienLap);

    	    Phong phong = new Phong();
    	    phong.setMaPhong(maPhong);

    	    // Tạo đối tượng PhieuDatPhong
    	    PhieuDatPhong phieuDatPhong = new PhieuDatPhong();
    	    phieuDatPhong.setKhachHang(khachHang);
    	    phieuDatPhong.setNhanVienLap(nhanVien);
    	    phieuDatPhong.setPhong(phong);
    	    phieuDatPhong.setNgayNhanPhong(ngayNhanPhong);
    	    phieuDatPhong.setNgayTraPhong(ngayTraPhong);
    	    phieuDatPhong.setTienCoc(tienCoc);
    	    phieuDatPhong.setLoaiHinh(loaiHinh);
    	    phieuDatPhong.setGioNhanPhong(gioNhanPhongStr);
    	    phieuDatPhong.setGioTraPhong(gioTraPhongStr);
    	    phieuDatPhong.setTongTien(tongTien);
    	    phieuDatPhong.setTrangThai(trangThai);

    	    // Gọi DAO để lưu vào cơ sở dữ liệu
    	    DanhSachDatPhong_DAO phieuDatPhongDAO = new DanhSachDatPhong_DAO();
    	    boolean success = phieuDatPhongDAO.addPhieuDatPhong(phieuDatPhong);
    	    
    	    // Thông báo kết quả
    	    if (success) {
    	        dispose();
    	        JOptionPane.showMessageDialog(this, "Đặt phòng nhanh thành công!");

    	        String maPhongDat = phieuDatPhong.getPhong().getMaPhong();

    	        phongDAO.capNhatTrangThaiPhong(maPhongDat, "DANG_SU_DUNG"); // Cập nhật trạng thái phòng trong CSDL

    	        // Cập nhật màu nền của phòng trong Phong_GUI thành #FA5950
    	        phongGUI.updateRoomColor(maPhongDat, Color.decode("#FA5950"));
    	     // Gọi listener để thông báo cập nhật dữ liệu

    	        // Sau khi lưu thành công, bạn có thể cập nhật giao diện hoặc thực hiện hành động khác
    	    } else {
    	        JOptionPane.showMessageDialog(this, "Đặt phòng nhanh thất bại. Vui lòng kiểm tra lại thông tin.");
    	    }
    	} catch (Exception ex) {
    	    ex.printStackTrace();
    	}
    }//GEN-LAST:event_btnDatNhanhMouseClicked

    private void btnDatTruocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDatTruocMouseClicked
    	try {
    		KhachHang_DAO khachHangDAO = new KhachHang_DAO();
    		
    	    // Lấy thông tin từ giao diện
    	    String maPhong = lbMaPhong.getText();
    	    String cccdKhachHang = (String) cboDSCCCD.getSelectedItem();
    		String maKhachHang = khachHangDAO.getMaKhachHangByCCCD(cccdKhachHang);
    	    java.util.Date ngayNhanPhong = txtNgayCheckIn.getDate();
    	    java.util.Date ngayTraPhong = txtNgayCheckOut.getDate();
    	    double tienCoc = txtTienCoc.getText().isEmpty() ? 0.0 : Double.parseDouble(txtTienCoc.getText());
    	    String loaiHinh = (String) cboLoaiHinh.getSelectedItem();
    	    
    	 // Chuyển đổi giờ nhận phòng và giờ trả phòng từ Date sang String
    	    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
    	    String gioNhanPhongStr = timeFormat.format((Date) txtGioCheckIn.getValue());
    	    String gioTraPhongStr = timeFormat.format((Date) txtGioCheckOut.getValue());
    	    
    	    double tongTien = lbTongTien.getText().isEmpty() ? 0.0 : Double.parseDouble(lbTongTien.getText().replace(",", ""));
    	    String trangThai = "Chưa nhận"; // Trạng thái mặc định cho phiếu đặt phòng mới

    	    // Kiểm tra thông tin bắt buộc
    	    if (ngayNhanPhong == null || ngayTraPhong == null) {
    	        JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày nhận phòng và ngày trả phòng.");
    	        return;
    	    }

    	    // Tạo các đối tượng liên quan
    	    KhachHang khachHang = new KhachHang();
    	    khachHang.setMaKhachHang(maKhachHang); // Sử dụng mã khách hàng

    	    String maNhanVienLap = Login_GUI.maNhanVien; // Lấy mã nhân viên từ đăng nhập
    	    NhanVien nhanVien = new NhanVien(maNhanVienLap);

    	    Phong phong = new Phong();
    	    phong.setMaPhong(maPhong);

    	    // Tạo đối tượng PhieuDatPhong
    	    PhieuDatPhong phieuDatPhong = new PhieuDatPhong();
    	    phieuDatPhong.setKhachHang(khachHang);
    	    phieuDatPhong.setNhanVienLap(nhanVien);
    	    phieuDatPhong.setPhong(phong);
    	    phieuDatPhong.setNgayNhanPhong(ngayNhanPhong);
    	    phieuDatPhong.setNgayTraPhong(ngayTraPhong);
    	    phieuDatPhong.setTienCoc(tienCoc);
    	    phieuDatPhong.setLoaiHinh(loaiHinh);
    	    phieuDatPhong.setGioNhanPhong(gioNhanPhongStr);
    	    phieuDatPhong.setGioTraPhong(gioTraPhongStr);
    	    phieuDatPhong.setTongTien(tongTien);
    	    phieuDatPhong.setTrangThai(trangThai);

    	    // Gọi DAO để lưu vào cơ sở dữ liệu
    	    DanhSachDatPhong_DAO phieuDatPhongDAO = new DanhSachDatPhong_DAO();
    	    boolean success = phieuDatPhongDAO.addPhieuDatPhong(phieuDatPhong);
    	    
    	    // Thông báo kết quả
    	    if (success) {
    	        dispose();
    	        JOptionPane.showMessageDialog(this, "Đặt phòng nhanh thành công!");

    	        String maPhongDat = phieuDatPhong.getPhong().getMaPhong();

    	        // Cập nhật màu nền của phòng trong Phong_GUI thành #FA5950
    	        phongGUI.updateRoomColor(maPhongDat, Color.decode("#FA5950"));
    	     // Gọi listener để thông báo cập nhật dữ liệu

    	        // Sau khi lưu thành công, bạn có thể cập nhật giao diện hoặc thực hiện hành động khác
    	    } else {
    	        JOptionPane.showMessageDialog(this, "Đặt phòng nhanh thất bại. Vui lòng kiểm tra lại thông tin.");
    	    }
    	} catch (Exception ex) {
    	    ex.printStackTrace();
    	}
    }//GEN-LAST:event_btnDatTruocMouseClicked
                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatPhong_Dialog_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatPhong_Dialog_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatPhong_Dialog_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatPhong_Dialog_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
        	public void run() {
                // Lấy Window hiện tại nếu có
                Window window = SwingUtilities.getWindowAncestor(phongGUI); // dialog ở đây là JComponent hiện tại của bạn

                // Nếu bạn không có Window cha, có thể sử dụng null
                DatPhong_Dialog_GUI dialog = new DatPhong_Dialog_GUI(window, true, maPhong, phongGUI);
                
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                
                dialog.setVisible(true);
            }
        });
    }
    
    
    
    private void setDefaultDateTime() {
        // Cấu hình JSpinner1 cho thời gian Check-in, chỉ hiển thị giờ phút
        txtGioCheckIn.setModel(new SpinnerDateModel());
        JSpinner.DateEditor timeEditorCheckIn = new JSpinner.DateEditor(txtGioCheckIn, "HH:mm");
        txtGioCheckIn.setEditor(timeEditorCheckIn);
        txtGioCheckIn.setValue(getDefaultCheckInTime()); // Đặt thời gian mặc định cho Check-in là 14:00

        // Cấu hình JSpinner2 cho thời gian Check-out, chỉ hiển thị giờ phút
        txtGioCheckOut.setModel(new SpinnerDateModel());
        JSpinner.DateEditor timeEditorCheckOut = new JSpinner.DateEditor(txtGioCheckOut, "HH:mm");
        txtGioCheckOut.setEditor(timeEditorCheckOut);
        txtGioCheckOut.setValue(getDefaultCheckOutTime()); // Đặt thời gian mặc định cho Check-out là 12:00

        // Chỉ cho phép nhập số trong txtTienCoc
        txtTienCoc.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isDigit(c)) {
                    evt.consume();
                }
            }
        });

        // Thiết lập Spinner cho số người lớn (không cho phép giá trị âm)
        txtSoNguoiLon.setModel(new javax.swing.SpinnerNumberModel(1, 0, 2, 1));

        // Thiết lập Spinner cho số trẻ em (không cho phép giá trị âm)
        txtSoTreEm.setModel(new javax.swing.SpinnerNumberModel(0, 0, 3, 1));
    }

    // Phương thức trả về thời gian mặc định cho Check-in (14:00)
    private Date getDefaultCheckInTime() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 14);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        return calendar.getTime();
    }

    // Phương thức trả về thời gian mặc định cho Check-out (12:00)
    private Date getDefaultCheckOutTime() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 12);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        return calendar.getTime();
    }
    
    private void setDefaultDate() {
    	Calendar calendar = Calendar.getInstance();

        // Đặt giờ về 0:00 để tránh sai lệch thời gian
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        
        txtNgayCheckIn.setDateFormatString("dd/MM/yyyy");
        txtNgayCheckOut.setDateFormatString("dd/MM/yyyy");

        // Ngày Check-in là ngày hiện tại
        Date checkInDate = calendar.getTime();
        txtNgayCheckIn.setDate(checkInDate);

        // Ngày Check-out là ngày hôm sau
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date checkOutDate = calendar.getTime();
        txtNgayCheckOut.setDate(checkOutDate);
    }
    
    
    private void initListeners() {
        // Lắng nghe thay đổi ngày Check-in
        txtNgayCheckIn.getDateEditor().addPropertyChangeListener((PropertyChangeListener) new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    Date checkInDate = txtNgayCheckIn.getDate();
                    Date checkOutDate = txtNgayCheckOut.getDate();

                    // Kiểm tra nếu Check-in trễ hơn Check-out
                    if (checkInDate != null && checkOutDate != null && checkInDate.after(checkOutDate)) {
                        JOptionPane.showMessageDialog(null, "Ngày Check-in không được trễ hơn ngày Check-out", 
                                                      "Lỗi ngày tháng", JOptionPane.ERROR_MESSAGE);

                        // Đặt lại ngày Check-in bằng ngày Check-out hoặc sớm hơn tùy chọn
                        txtNgayCheckIn.setDate(checkOutDate);
                    }
                }
            }
        });

        // Lắng nghe thay đổi ngày Check-out (tùy chọn)
        txtNgayCheckOut.getDateEditor().addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    Date checkInDate = txtNgayCheckIn.getDate();
                    Date checkOutDate = txtNgayCheckOut.getDate();

                    // Kiểm tra nếu Check-out sớm hơn Check-in
                    if (checkInDate != null && checkOutDate != null && checkOutDate.before(checkInDate)) {
                        JOptionPane.showMessageDialog(null, "Ngày Check-out không được sớm hơn ngày Check-in", 
                                                      "Lỗi ngày tháng", JOptionPane.ERROR_MESSAGE);

                        // Đặt lại ngày Check-out bằng ngày Check-in hoặc muộn hơn tùy chọn
                        txtNgayCheckOut.setDate(checkInDate);
                    }
                }
            }
        });
    }
    
    
 // Phương thức tải danh sách CCCD vào ComboBox cboDSCCCD
    private void loadCustomerCCCDs() {
        List<String> customerCCCDs = khachHangDAO.getAllCustomerCCCD();
        for (String cccd : customerCCCDs) {
            cboDSCCCD.addItem(cccd); // Thêm từng CCCD vào ComboBox
        }
    }
    
 // Thiết lập listener cho ComboBox cboDSCCCD
    private void setupComboBoxListener() {
        cboDSCCCD.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCCCD = (String) cboDSCCCD.getSelectedItem();
                if (selectedCCCD != null) {
                    displayCustomerInfo(selectedCCCD); // Hiển thị thông tin khách hàng lên bảng
                }
            }
        });
    }
    
    // Phương thức hiển thị thông tin khách hàng lên bảng khi chọn CCCD
    private void displayCustomerInfo(String cccd) {
        KhachHang khachHang = khachHangDAO.getCustomerByCCCD(cccd);
        DefaultTableModel model = (DefaultTableModel) tbKH.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ

        if (khachHang != null) {
            model.addRow(new Object[]{
                khachHang.getTenKhachHang(),
                khachHang.getNgaySinh(),
                khachHang.getCCCD(),
                khachHang.getDienThoai(),
                khachHang.getPhai()
            });
        }
    }
    
//    Phương thức chọn loại hình Giờ thì ngày check-out bằng ngày check-in
    private void initLoaiHinhListener() {
        cboLoaiHinh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Kiểm tra nếu Loại hình được chọn là "Giờ"
                if ("Giờ".equals(cboLoaiHinh.getSelectedItem().toString())) {
                    Date checkInDate = txtNgayCheckIn.getDate();
                    
                    // Đặt ngày Check-out bằng ngày Check-in
                    txtNgayCheckOut.setDate(checkInDate);
                }
                else {
                	setDefaultDate();
                }
            }
        });
    }
    
    private void addListeners() {
        // Lắng nghe thay đổi trên ComboBox loại hình
        cboLoaiHinh.addItemListener(e -> calculateTotalAmount());

        // Lắng nghe thay đổi trên JDateChooser cho ngày check-in và check-out
        txtNgayCheckIn.addPropertyChangeListener("date", e -> calculateTotalAmount());
        txtNgayCheckOut.addPropertyChangeListener("date", e -> calculateTotalAmount());

        // Lắng nghe thay đổi trên JSpinner cho giờ check-in và check-out (nếu bạn dùng JSpinner cho giờ)
        txtGioCheckIn.addChangeListener(e -> calculateTotalAmount());
        txtGioCheckOut.addChangeListener(e -> calculateTotalAmount());

 
        txtTienCoc.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                calculateTotalAmount();
            }
        });
    }

    
    
    private void calculateTotalAmount() {
        try {
            // Lấy loại hình và mã phòng từ giao diện
            String loaiHinh = cboLoaiHinh.getSelectedItem().toString();
            String maPhong = lbMaPhong.getText();

            // Tạo đối tượng LoaiPhong_DAO để truy xuất dữ liệu giá phòng
            LoaiPhong_DAO loaiPhongDAO = new LoaiPhong_DAO();

            // Khai báo giá phòng theo loại hình
            double giaPhong;
            if ("Ngày đêm".equals(loaiHinh)) {
                giaPhong = loaiPhongDAO.getGiaTienTheoNgay(maPhong); // Lấy giá tiền theo ngày
            } else if ("Giờ".equals(loaiHinh)) {
                giaPhong = loaiPhongDAO.getGiaTienTheoGio(maPhong); // Lấy giá tiền theo giờ
            } else {
                JOptionPane.showMessageDialog(this, "Loại hình không hợp lệ.");
                return;
            }

            double tienCoc = txtTienCoc.getText().isEmpty() ? 0 : Double.parseDouble(txtTienCoc.getText());
            double tongTien = 0;

            // Lấy dữ liệu ngày từ JDateChooser và giờ từ JSpinner
            Date ngayCheckIn = txtNgayCheckIn.getDate();
            Date ngayCheckOut = txtNgayCheckOut.getDate();
            Date gioCheckIn = (Date) txtGioCheckIn.getValue();
            Date gioCheckOut = (Date) txtGioCheckOut.getValue();

            // Kiểm tra nếu giá trị ngày và giờ là null, ngăn không thực hiện tính toán khi thiếu thông tin
            if (ngayCheckIn == null || ngayCheckOut == null || gioCheckIn == null || gioCheckOut == null) {
                lbTongTien.setText("0");
                return;
            }

            // Tính toán tổng tiền dựa trên loại hình
            if ("Ngày đêm".equals(loaiHinh)) {
                // Tính số ngày ở
                long diffInMillies = Math.abs(ngayCheckOut.getTime() - ngayCheckIn.getTime());
                int soNgayO = (int) TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                tongTien = (soNgayO * giaPhong)  - tienCoc;
            } else if ("Giờ".equals(loaiHinh)) {
                // Tính số giờ ở dựa trên giờ check-in và check-out
                Calendar calendarCheckIn = Calendar.getInstance();
                calendarCheckIn.setTime(gioCheckIn);
                calendarCheckIn.set(Calendar.YEAR, ngayCheckIn.getYear() + 1900);
                calendarCheckIn.set(Calendar.MONTH, ngayCheckIn.getMonth());
                calendarCheckIn.set(Calendar.DAY_OF_MONTH, ngayCheckIn.getDate());

                Calendar calendarCheckOut = Calendar.getInstance();
                calendarCheckOut.setTime(gioCheckOut);
                calendarCheckOut.set(Calendar.YEAR, ngayCheckOut.getYear() + 1900);
                calendarCheckOut.set(Calendar.MONTH, ngayCheckOut.getMonth());
                calendarCheckOut.set(Calendar.DAY_OF_MONTH, ngayCheckOut.getDate());

                long diffInMillies = Math.abs(calendarCheckOut.getTimeInMillis() - calendarCheckIn.getTimeInMillis());
                int soGio = (int) TimeUnit.HOURS.convert(diffInMillies, TimeUnit.MILLISECONDS);

                // Xử lý lỗi nếu số giờ tính ra là 0 hoặc âm
                if (soGio <= 0) {
                    JOptionPane.showMessageDialog(this, "Thời gian check-out phải lớn hơn thời gian check-in.");
                    lbTongTien.setText("0");
                    return;
                }

                tongTien = (soGio * giaPhong)  - tienCoc;
            }

            // Định dạng lại lbTongTien với tối đa 2 chữ số thập phân
            lbTongTien.setText(String.format("%.0f", tongTien));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Lỗi nhập liệu: Khuyến mãi hoặc tiền cọc không hợp lệ.");
        }
    }
    
    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatNhanh;
    private javax.swing.JButton btnDatTruoc;
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnThemKH;
    private javax.swing.JComboBox<String> cboDSCCCD;
    private javax.swing.JComboBox<String> cboLoaiHinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbMaPhong;
    private javax.swing.JLabel lbTongTien;
    private javax.swing.JTable tbKH;
    private javax.swing.JSpinner txtGioCheckIn;
    private javax.swing.JSpinner txtGioCheckOut;
    private com.toedter.calendar.JDateChooser txtNgayCheckIn;
    private com.toedter.calendar.JDateChooser txtNgayCheckOut;
    private javax.swing.JSpinner txtSoNguoiLon;
    private javax.swing.JSpinner txtSoTreEm;
    private javax.swing.JTextField txtTienCoc;
    // End of variables declaration//GEN-END:variables
}
