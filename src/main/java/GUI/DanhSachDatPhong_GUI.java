/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import DAO.DanhSachDatPhong_DAO;
import DAO.HoaDon_DAO;
import DAO.Phong_DAO;
import ENTITY.PhieuDatPhong;

/**
 *
 * @author Admin
 */
public class DanhSachDatPhong_GUI extends javax.swing.JPanel {
	private DefaultTableModel originalModel;
	private DanhSachDatPhong_DAO danhSachDatPhongDAO = new DanhSachDatPhong_DAO();
	private DanhSachDatPhong_DAO phieuDatPhongDAO;
    private Phong_DAO phongDAO = new Phong_DAO();
	// Tạo một Timer với thời gian lặp lại là 5000ms (5 giây)
    private Timer timer;

    /**
     * Creates new form DanhSachDatPhong
     */
    public DanhSachDatPhong_GUI() {
        initComponents();

        updateHeader();
        
        loadDataToTable();
        setDefaultDate();
        
        
        setWidthColumns();
        
        // Lưu model ban đầu ngay khi khởi tạo
        originalModel = (DefaultTableModel) tbDanhSachDatPhong.getModel();

        
//        Chức năng tìm kiếm
        btnTimKiem.addActionListener(e -> filterTableData());
        
     // Khởi tạo timer và cài đặt hành động lặp lại (hàm load lại dữ liệu khi database thay đổi)
        timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Kiểm tra sự thay đổi trong cơ sở dữ liệu
            	loadDataToTable();
                setWidthColumns();
            }
        });
//        timer.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titleHoaDon = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDanhSachDatPhong = new javax.swing.JTable();
        btnHuy = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnCapNhat = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnNhanPhong = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNgayCheckIn = new com.toedter.calendar.JDateChooser();
        txtNgayCheckOut = new com.toedter.calendar.JDateChooser();
        cboTrangThai = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(855, 634));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        titleHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleHoaDon.setText("Danh sách đặt phòng");

        tbDanhSachDatPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][] {},  // Bắt đầu với dữ liệu rỗng
            new String[] { "Mã khách hàng", "Tên khách hàng", "CCCD", "Phái", "Ngày sinh", "Điện thoại" }
        ) {
            Class<?>[] types = new Class<?>[] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class,
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Không cho phép chỉnh sửa dữ liệu trong bảng
            }
        });
        tbDanhSachDatPhong.setRowHeight(40);
        jScrollPane1.setViewportView(tbDanhSachDatPhong);

        btnHuy.setBackground(new java.awt.Color(255, 0, 0));
        btnHuy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHuyMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/delete.png"))); // NOI18N
        jLabel1.setText("Hủy");

        javax.swing.GroupLayout btnHuyLayout = new javax.swing.GroupLayout(btnHuy);
        btnHuy.setLayout(btnHuyLayout);
        btnHuyLayout.setHorizontalGroup(
            btnHuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnHuyLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnHuyLayout.setVerticalGroup(
            btnHuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnHuyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnCapNhat.setBackground(new java.awt.Color(245, 109, 40));
        btnCapNhat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/fixing.png"))); // NOI18N
        jLabel2.setText("Cập nhật");

        javax.swing.GroupLayout btnCapNhatLayout = new javax.swing.GroupLayout(btnCapNhat);
        btnCapNhat.setLayout(btnCapNhatLayout);
        btnCapNhatLayout.setHorizontalGroup(
            btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
        );
        btnCapNhatLayout.setVerticalGroup(
            btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnCapNhatLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        btnNhanPhong.setBackground(new java.awt.Color(25, 159, 254));
        btnNhanPhong.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNhanPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNhanPhongMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/add.png"))); // NOI18N
        jLabel3.setText("Nhận Phòng");

        javax.swing.GroupLayout btnNhanPhongLayout = new javax.swing.GroupLayout(btnNhanPhong);
        btnNhanPhong.setLayout(btnNhanPhongLayout);
        btnNhanPhongLayout.setHorizontalGroup(
            btnNhanPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnNhanPhongLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnNhanPhongLayout.setVerticalGroup(
            btnNhanPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnNhanPhongLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtTimKiem.setForeground(new java.awt.Color(144, 144, 144));
        txtTimKiem.setText("Nhập tên KH, SDT để tìm");
        txtTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusLost(evt);
            }
        });
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Search.png"))); // NOI18N
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Đến");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Từ");

        txtNgayCheckIn.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtNgayCheckInPropertyChange(evt);
            }
        });

        txtNgayCheckOut.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtNgayCheckOutPropertyChange(evt);
            }
        });

        cboTrangThai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Chưa nhận", "Đã nhận" }));
        cboTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTrangThaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNgayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNgayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(78, 78, 78)
                .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNhanPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(titleHoaDon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTimKiem)
                                    .addComponent(btnTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                                .addComponent(txtNgayCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNgayCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNhanPhong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnCapNhat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnHuy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void txtNgayCheckInPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtNgayCheckInPropertyChange
        locDanhSachDatPhong();
    }//GEN-LAST:event_txtNgayCheckInPropertyChange

    private void txtNgayCheckOutPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtNgayCheckOutPropertyChange
        locDanhSachDatPhong();
    }//GEN-LAST:event_txtNgayCheckOutPropertyChange

    private void cboTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTrangThaiActionPerformed
        locDanhSachDatPhong();
    }//GEN-LAST:event_cboTrangThaiActionPerformed

    private void btnNhanPhongMouseClicked(java.awt.event.MouseEvent evt) {
    	hienThiThongTinDatPhong();
    }//GEN-LAST:event_btnNhanPhongMouseClicked

    private void txtTimKiemFocusGained(java.awt.event.FocusEvent evt) {
        txtTimKiem.setText("");
        txtTimKiem.setForeground(Color.BLACK);
    }

    private void txtTimKiemFocusLost(java.awt.event.FocusEvent evt) {
        txtTimKiem.setForeground(Color.decode("#909090"));
    }

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void btnHuyMouseClicked(java.awt.event.MouseEvent evt) {
    	int selectedRow = tbDanhSachDatPhong.getSelectedRow(); // Lấy dòng được chọn
        if (selectedRow != -1) {
            // Hiển thị hộp thoại xác nhận
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn hủy đặt phòng này không?", "Xác nhận hủy", JOptionPane.YES_NO_OPTION);
            
            // Nếu người dùng chọn YES thì thực hiện xóa
            if (confirm == JOptionPane.YES_OPTION) {
                String maPhieuDatPhong = tbDanhSachDatPhong.getValueAt(selectedRow, 1).toString(); // Giả sử mã hóa đơn ở cột thứ 2
                String maPhong = phongDAO.getMaPhongByMaPhieuDatPhong(maPhieuDatPhong);
                // Gọi phương thức xóa từ DAO
                boolean isDeleted = danhSachDatPhongDAO.deletePhieuDatPhong(maPhieuDatPhong);

                if (isDeleted) {
                    // Xóa dòng khỏi bảng giao diện sau khi xóa thành công
                    ((DefaultTableModel) tbDanhSachDatPhong.getModel()).removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "Xóa thành công!");
                 // Cập nhật trạng thái phòng thành "PHONG_TRONG"
                    if (maPhong != null) {
                        phongDAO.capNhatTrangThaiPhong(maPhong, "PHONG_TRONG");
                    }else {
                    	System.out.println("Phong chua cap nhat");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa không thành công!");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng cần hủy!");
        }
    }
    
    private void updateHeader() {
		JTableHeader header = tbDanhSachDatPhong.getTableHeader();
		header.setFont(new Font("Times new Romans", Font.BOLD, 16));
	}
    
    private void setWidthColumns() {
        tbDanhSachDatPhong.getColumnModel().getColumn(0).setMaxWidth(50); // Đặt chiều rộng tối thiểu cho cột STT
        tbDanhSachDatPhong.getColumnModel().getColumn(4).setMaxWidth(120);
	}
    
    public void loadDataToTable() {
        DanhSachDatPhong_DAO danhSachDatPhongDAO = new DanhSachDatPhong_DAO();
        List<Object[]> dsDatPhong = danhSachDatPhongDAO.getAllDanhSachDatPhong();

        DefaultTableModel tableModel = new DefaultTableModel(
            new Object[][] {},  // Bắt đầu với dữ liệu rỗng
            new String[] { "Stt", "Mã Phiếu", "Tên khách hàng", "Số điện thoại", "Phòng", "Ngày nhận", "Ngày trả", "Tiền cọc", "Trạng thái" }
        );

        tbDanhSachDatPhong.setModel(tableModel);
        tableModel.setRowCount(0);

        // Định dạng ngày theo dd/MM/yyyy
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        int count = 1;
        for (Object[] row : dsDatPhong) {
            tableModel.addRow(new Object[]{
            	count ,  
                row[1],
                row[2],  
                row[3],  
                row[4],  
                dateFormat.format(row[5]),
                dateFormat.format(row[6]), 
                row[7],
                row[8]
            });
            count++;
        }
        tableModel.fireTableDataChanged();
    }
    
    // Phương thức lọc dữ liệu
    private void filterTableData() {
        String keyword = txtTimKiem.getText().trim().toLowerCase(); // Lấy từ khóa tìm kiếm

        // Kiểm tra nếu từ khóa rỗng, khôi phục dữ liệu ban đầu
        if (keyword.isEmpty()) {
            tbDanhSachDatPhong.setModel(originalModel); // Khôi phục model ban đầu
            return;
        }

        // Tạo model mới để chứa dữ liệu lọc
        DefaultTableModel filteredModel = new DefaultTableModel(
                new String[] { "Stt", "Mã Phiếu", "Tên khách hàng", "Số điện thoại", "Phòng", "Ngày nhận", "Ngày trả", "Tiền cọc", "Trạng thái" }, 
                0
        );

        boolean found = false; // Đánh dấu nếu tìm thấy dữ liệu

        // Duyệt qua từng hàng trong originalModel và lọc dữ liệu
        for (int i = 0; i < originalModel.getRowCount(); i++) {// Lấy tên khách hàng và mã phòng, kiểm tra null và loại bỏ khoảng trắng
            String tenKhachHang = originalModel.getValueAt(i, 2) != null 
                    ? originalModel.getValueAt(i, 2).toString().trim().toLowerCase() 
                    : "";
			String maPhong = originalModel.getValueAt(i, 3) != null 
			               ? originalModel.getValueAt(i, 3).toString().trim().toLowerCase() 
			               : "";
			

            // Kiểm tra nếu từ khóa xuất hiện trong tên khách hàng hoặc mã phòng
            if (tenKhachHang.contains(keyword) || maPhong.contains(keyword)) {
                filteredModel.addRow(new Object[]{
                    originalModel.getValueAt(i, 0),
                    originalModel.getValueAt(i, 1), 
                    originalModel.getValueAt(i, 2), 
                    originalModel.getValueAt(i, 3),
                    originalModel.getValueAt(i, 4),
                    originalModel.getValueAt(i, 5), 
                    originalModel.getValueAt(i, 6),
                    originalModel.getValueAt(i, 7), 
                    originalModel.getValueAt(i, 8),
                });
                found = true; // Đánh dấu là đã tìm thấy dữ liệu
            }
        }

        // Cập nhật JTable với model đã lọc hoặc hiển thị thông báo nếu không tìm thấy
        if (found) {
            tbDanhSachDatPhong.setModel(filteredModel);
            setWidthColumns();// Cập nhật model đã lọc
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy dữ liệu phù hợp!");
        }
    }
    
    private void setDefaultDate() {
    	Calendar calendar = Calendar.getInstance();

        // Đặt giờ về 0:00 để tránh sai lệch thời gian
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        
        txtNgayCheckIn.setDateFormatString("dd/MM/yyyy");
        txtNgayCheckOut.setDateFormatString("dd/MM/yyyy");

        // Ngày Check-in là ngày hiện tại
        Date checkInDate = calendar.getTime();
        txtNgayCheckIn.setDate(checkInDate);

        // Ngày Check-out là ngày hôm sau
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date checkOutDate = calendar.getTime();
        txtNgayCheckOut.setDate(checkOutDate);
    }
    
    private void locDanhSachDatPhong() {
        // Lấy giá trị từ ComboBox và DateChooser
        String trangThai = cboTrangThai.getSelectedItem().toString();
        Date ngayNhan = txtNgayCheckIn.getDate();
        Date ngayTra = txtNgayCheckOut.getDate();

        // Khởi tạo đối tượng DAO
        DanhSachDatPhong_DAO dao = new DanhSachDatPhong_DAO();

        // Lấy danh sách đặt phòng đã lọc
        List<Object[]> danhSachLoc = dao.getDanhSachDatPhongTheoDieuKien(ngayNhan, ngayTra, trangThai);
        
        if (trangThai.equals("Tất cả")) {
        	loadDataToTable();
        } else {

            // Cập nhật bảng hiển thị với dữ liệu đã lọc
            capNhatBangDatPhong(danhSachLoc);
        }
    }
    
    private void capNhatBangDatPhong(List<Object[]> danhSachLoc) {
    	
    	DanhSachDatPhong_DAO danhSachDatPhongDAO = new DanhSachDatPhong_DAO();
        List<Object[]> dsDatPhong = danhSachDatPhongDAO.getAllDanhSachDatPhong();

        DefaultTableModel tableModel = new DefaultTableModel(
            new Object[][] {},  // Bắt đầu với dữ liệu rỗng
            new String[] { "Stt", "Mã Phiếu", "Tên khách hàng", "Số điện thoại", "Phòng", "Ngày nhận", "Ngày trả", "Tiền cọc", "Trạng thái" }
        );

        tbDanhSachDatPhong.setModel(tableModel);
        tableModel.setRowCount(0);

        // Định dạng ngày theo dd/MM/yyyy
       
        tableModel.fireTableDataChanged();
        // Xóa dữ liệu hiện tại trên bảng
        tableModel.setRowCount(0);

        // Duyệt qua danh sách đã lọc và thêm vào bảng
        for (Object[] row : danhSachLoc) {
        	tableModel.addRow(row);
        }
    }
    
    public void startTimer() {
        if (!timer.isRunning()) {
            timer.start(); // Bắt đầu timer khi nó chưa chạy
            setWidthColumns();
        }
    }
    
    private void hienThiThongTinDatPhong() {
        int selectedRow = tbDanhSachDatPhong.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra nếu có dòng nào được chọn
            // Lấy mã phiếu từ bảng
            String maPhieuDatPhong = (String) tbDanhSachDatPhong.getValueAt(selectedRow, 1);

            // Tạo một dialog NhanPhong_Dialog và truyền mã phiếu đặt phòng vào
		    Window window = SwingUtilities.getWindowAncestor(DanhSachDatPhong_GUI.this);
            NhanPhong_Dialog nhanPhongDialog = new NhanPhong_Dialog(window, true, maPhieuDatPhong);
            nhanPhongDialog.setVisible(true); // Hiển thị dialog
        }else {
        	JOptionPane.showMessageDialog(this, "Chọn thông tin để nhận phòng !");
			return;
        }
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnCapNhat;
    private javax.swing.JPanel btnHuy;
    private javax.swing.JPanel btnNhanPhong;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JComboBox<String> cboTrangThai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbDanhSachDatPhong;
    private javax.swing.JLabel titleHoaDon;
    private com.toedter.calendar.JDateChooser txtNgayCheckIn;
    private com.toedter.calendar.JDateChooser txtNgayCheckOut;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
