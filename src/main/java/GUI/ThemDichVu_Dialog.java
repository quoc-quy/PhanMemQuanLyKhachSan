/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import java.awt.Component;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

import Components.SpinnerEditor;
import DAO.ChiTietDichVu_DAO;
import DAO.ChiTietHoaDon_DAO;
import DAO.DichVu_DAO;
import DAO.HoaDon_DAO;
import ENTITY.ChiTietDichVu;
import ENTITY.ChiTietHoaDon;
import ENTITY.DichVu;
import ENTITY.HoaDon;
import ENTITY.PhieuDatPhong;
import ENTITY.Phong;

import javax.swing.DefaultCellEditor;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Admin
 */
public class ThemDichVu_Dialog extends javax.swing.JDialog {
	private static ChiTietDatPhong_Dialog chiTietDP;
	private DefaultTableModel originalModel;

    private static String maPhong;
	/**
     * Creates new form ThemDichVu_Dialog
	 * @param phieuDatPhong 
     */
    public ThemDichVu_Dialog(Window parent, boolean modal, String maPhong, ChiTietDatPhong_Dialog chiTietDP) {
        super();
        this.maPhong = maPhong;
        this.chiTietDP = chiTietDP;
        initComponents();
        setLocationRelativeTo(null);
        lbMaPhong.setText(maPhong);
        
        loadDichVuData();
        setWidthColumns();
        // Lưu model ban đầu ngay khi khởi tạo
        originalModel = (DefaultTableModel) tbSanPham.getModel();
//      Chức năng tìm kiếm
      btnTimKiem.addActionListener(e -> filterTableData());
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSanPham = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbChiTietSP = new javax.swing.JTable();
        lbTongTien = new javax.swing.JLabel();
        btnLuu = new javax.swing.JButton();
        btnHuy = new javax.swing.JButton();
        lbMaPhong = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAlignmentX(5.0F);
        jPanel1.setAlignmentY(5.0F);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Thêm sản phẩm và dịch vụ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Danh sách sản phẩm");

        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Search.png"))); // NOI18N
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        tbSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Stt", "Tên sản phẩm"
            }
        ));
        tbSanPham.setCellSelectionEnabled(false);
        tbSanPham.setRowHeight(40);
        tbSanPham.setShowVerticalLines(true);
        tbSanPham.setUpdateSelectionOnSort(false);
        tbSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSanPhamMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbSanPham);

        tbChiTietSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stt", "Tên sản phẩm", "Số lượng", "Đơn giá", "Thành tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbChiTietSP.setAlignmentX(5.0F);
        tbChiTietSP.setRowHeight(40);
        tbChiTietSP.setShowVerticalLines(true);
        tbChiTietSP.getTableHeader().setReorderingAllowed(false);
        tbChiTietSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbChiTietSPMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbChiTietSP);

        lbTongTien.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbTongTien.setForeground(new java.awt.Color(255, 0, 51));
        lbTongTien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/money.png"))); // NOI18N
        lbTongTien.setText("0");

        btnLuu.setBackground(new java.awt.Color(25, 159, 254));
        btnLuu.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLuu.setForeground(new java.awt.Color(255, 255, 255));
        btnLuu.setText("Lưu");
        btnLuu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLuu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLuuMouseClicked(evt);
            }
        });

        btnHuy.setBackground(new java.awt.Color(153, 153, 153));
        btnHuy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnHuy.setText("Hủy");
        btnHuy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHuyMouseClicked(evt);
            }
        });
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        lbMaPhong.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbMaPhong.setForeground(new java.awt.Color(255, 0, 51));
        lbMaPhong.setText("P101");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lbTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbMaPhong))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(txtTimKiem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTongTien))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
    }//GEN-LAST:event_btnHuyActionPerformed

    private void tbSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSanPhamMouseClicked
    	DichVu_DAO dvDao = new DichVu_DAO();
        int selectedRow = tbSanPham.getSelectedRow();// Gắn IconRenderer cho cột "Xóa"
        tbChiTietSP.getColumnModel().getColumn(tbChiTietSP.getColumnCount() - 1).setCellRenderer(new IconRenderer());
        DefaultTableModel model = (DefaultTableModel) tbChiTietSP.getModel();
        ImageIcon deleteIcon = new ImageIcon(getClass().getResource("/IMAGES/minus.png"));
        if (selectedRow >= 0) {
            // Lấy thông tin sản phẩm từ dòng được chọn
            String tenSanPham = tbSanPham.getValueAt(selectedRow, 1).toString();
            double donGia = dvDao.layDonGiaBytenDichVu(tenSanPham);

            // Kiểm tra xem sản phẩm đã có trong tbChiTietSP chưa
            boolean sanPhamTonTai = false;
            for (int i = 0; i < tbChiTietSP.getRowCount(); i++) {
                Object cellValue = tbChiTietSP.getValueAt(i, 1);

                if (Objects.equals(cellValue, tenSanPham)) {
                    // Sản phẩm đã tồn tại, cập nhật số lượng và thành tiền
                    int soLuong = Integer.parseInt(tbChiTietSP.getValueAt(i, 2).toString()) + 1;
                    tbChiTietSP.setValueAt(soLuong, i, 2); // Cập nhật số lượng
                    tbChiTietSP.setValueAt(donGia * soLuong, i, 4); // Cập nhật thành tiền
                    sanPhamTonTai = true;
                    break;
                }
            }

            // Nếu sản phẩm chưa tồn tại, thêm một dòng mới
            if (!sanPhamTonTai) {
//                DefaultTableModel model = (DefaultTableModel) tbChiTietSP.getModel();
                Object[] row = {model.getRowCount() + 1, tenSanPham, 1, donGia, donGia, deleteIcon};
                model.addRow(row);
            }

            // Cập nhật tổng tiền sau khi thay đổi
            capNhatTongTien();
        }
    }//GEN-LAST:event_tbSanPhamMouseClicked

    private void tbChiTietSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbChiTietSPMouseClicked
    	int column = tbChiTietSP.columnAtPoint(evt.getPoint());
        int row = tbChiTietSP.rowAtPoint(evt.getPoint());

        // Kiểm tra nếu nhấn vào cột "Xóa"
        if (column == tbChiTietSP.getColumnCount() - 1) { // Cột "Xóa" là cột cuối cùng
            ((DefaultTableModel) tbChiTietSP.getModel()).removeRow(row); // Xóa dòng
            capNhatTongTien(); // Cập nhật tổng tiền sau khi xóa
        }
        setWidthColumns();
    }//GEN-LAST:event_tbChiTietSPMouseClicked

    private void btnHuyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHuyMouseClicked
        dispose();
    }//GEN-LAST:event_btnHuyMouseClicked

    private void btnLuuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLuuMouseClicked
    	// Tạo mã hóa đơn và lấy MaHoaDon
        HoaDon_DAO hoaDonDAO = new HoaDon_DAO();
        String maHoaDon = hoaDonDAO.createHoaDon();  // Tạo mã hóa đơn mới

        String maPhong = lbMaPhong.getText();

        if (maHoaDon != null) {
            boolean isAllSaved = true;  // Biến cờ để theo dõi trạng thái lưu thành công

            // Lặp qua các dòng trong bảng để lấy thông tin dịch vụ và lưu vào ChiTietHoaDon
            for (int i = 0; i < tbChiTietSP.getRowCount(); i++) {
                String tenDichVu = tbChiTietSP.getValueAt(i, 1).toString();  // Tên dịch vụ
                int soLuong = Integer.parseInt(tbChiTietSP.getValueAt(i, 2).toString());  // Số lượng
                double tongTienDichVu = Double.parseDouble(tbChiTietSP.getValueAt(i, 4).toString());  // Đơn giá

                // Lấy mã dịch vụ từ tên dịch vụ
                DichVu_DAO dichVuDAO = new DichVu_DAO();
                String maDichVu = dichVuDAO.getIdDichVuByName(tenDichVu);  // Lấy mã dịch vụ từ DAO

                if (maDichVu == null) {
                    // Nếu không tìm thấy mã dịch vụ, thông báo lỗi và dừng lại
                    JOptionPane.showMessageDialog(this, "Mã dịch vụ không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Lấy thời gian dịch vụ từ hệ thống (hoặc từ giao diện)
                java.sql.Date ngayDichVu = new java.sql.Date(System.currentTimeMillis());  // Ví dụ lấy ngày hiện tại, có thể lấy từ giao diện nếu cần

                // Tạo đối tượng ChiTietHoaDon và lưu vào cơ sở dữ liệu
                ChiTietHoaDon chiTietHoaDon = new ChiTietHoaDon();
                chiTietHoaDon.setHoaDon(new HoaDon(maHoaDon));  // Gắn mã hóa đơn
                chiTietHoaDon.setPhong(new Phong(maPhong));  // Mã phòng (có thể lấy từ giao diện)
                chiTietHoaDon.setDichVu(new DichVu(maDichVu));  // Mã dịch vụ, tên dịch vụ và đơn giá
                chiTietHoaDon.setSoLuong(soLuong);  // Số lượng
                chiTietHoaDon.setTongTienDichVu(tongTienDichVu);  // Thành tiền

                // Lưu chi tiết hóa đơn vào cơ sở dữ liệu
                ChiTietHoaDon_DAO chiTietDAO = new ChiTietHoaDon_DAO();
                if (!chiTietDAO.addOrUpdateChiTietHoaDon(chiTietHoaDon, maHoaDon, maPhong)) {
                    isAllSaved = false;  // Nếu có lỗi khi lưu dịch vụ, đánh dấu trạng thái là lỗi
                }
            }

            // Hiển thị thông báo chỉ khi tất cả dịch vụ đã được lưu thành công
            if (isAllSaved) {
                JOptionPane.showMessageDialog(this, "Lưu thành công!");
            } else {
                JOptionPane.showMessageDialog(this, "Có lỗi khi lưu một số dịch vụ!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Không thể tạo mã hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        dispose();
        
    }//GEN-LAST:event_btnLuuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemDichVu_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemDichVu_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemDichVu_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemDichVu_Dialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() { // Lấy Window hiện tại nếu có
                Window window = SwingUtilities.getWindowAncestor(chiTietDP); // dialog ở đây là JComponent hiện tại của bạn
                ThemDichVu_Dialog dialog = new ThemDichVu_Dialog(window, true, maPhong, chiTietDP);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void setWidthColumns() {
        tbSanPham.getColumnModel().getColumn(0).setMaxWidth(50); // Đặt chiều rộng tối thiểu cho cột STT
	}
    
 // Phương thức load dữ liệu dịch vụ vào bảng
    private void loadDichVuData() {
        DichVu_DAO dichVuDAO = new DichVu_DAO();
        List<DichVu> danhSachDichVu = dichVuDAO.getAllDichVu();
        DefaultTableModel tableModel = new DefaultTableModel(
                new Object[][] {},  // Bắt đầu với dữ liệu rỗng
                new String[] { "Stt", "Tên sản phẩm" }
            );
        tbSanPham.setModel(tableModel);
        tableModel.setRowCount(0); // Xóa dữ liệu cũ

        int stt = 1;
        for (DichVu dichVu : danhSachDichVu) {
            Object[] row = {stt++, dichVu.getTenDichVu()};
            tableModel.addRow(row);
        }
    }
    // Phương thức lọc dữ liệu
    private void filterTableData() {
        String keyword = txtTimKiem.getText().trim().toLowerCase(); // Lấy từ khóa tìm kiếm

        // Kiểm tra nếu từ khóa rỗng, khôi phục dữ liệu ban đầu
        if (keyword.isEmpty()) {
            tbSanPham.setModel(originalModel); // Khôi phục model ban đầu
            return;
        }

        // Tạo model mới để chứa dữ liệu lọc
        DefaultTableModel filteredModel = new DefaultTableModel(
                new String[] { "Stt", "Tên sản phẩm" }, 
                0
        );

        boolean found = false; // Đánh dấu nếu tìm thấy dữ liệu

        // Duyệt qua từng hàng trong originalModel và lọc dữ liệu
        for (int i = 0; i < originalModel.getRowCount(); i++) {// Lấy tên khách hàng và mã phòng, kiểm tra null và loại bỏ khoảng trắng
            String tenSP = originalModel.getValueAt(i, 1) != null 
                    ? originalModel.getValueAt(i, 1).toString().trim().toLowerCase() 
                    : "";
			

            // Kiểm tra nếu từ khóa xuất hiện trong tên khách hàng hoặc mã phòng
            if (tenSP.contains(keyword)) {
                filteredModel.addRow(new Object[]{
                    originalModel.getValueAt(i, 0),
                    originalModel.getValueAt(i, 1), 
                });
                found = true; // Đánh dấu là đã tìm thấy dữ liệu
            }
        }

        // Cập nhật JTable với model đã lọc hoặc hiển thị thông báo nếu không tìm thấy
        if (found) {
            setWidthColumns();// Cập nhật model đã lọc
            tbSanPham.setModel(filteredModel);
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy dữ liệu phù hợp!");
        }
    }
    
 // Phương thức tính tổng tiền và cập nhật vào lbTongTien
    private void capNhatTongTien() {
        double tongTien = 0;

        // Duyệt qua các hàng trong bảng tbChiTietSP để tính tổng tiền
        for (int i = 0; i < tbChiTietSP.getRowCount(); i++) {
            Object thanhTienValue = tbChiTietSP.getValueAt(i, 4); // Cột "Thành tiền"
            
            if (thanhTienValue != null) {
                tongTien += Double.parseDouble(thanhTienValue.toString());
            }
        }

        // Cập nhật tổng tiền vào lbTongTien (Giả sử lbTongTien là JLabel hiển thị tổng tiền)
        lbTongTien.setText(String.format("%.0f", tongTien));
    }

    public class IconRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof Icon) {
                setIcon((Icon) value); // Thiết lập icon
                setText(null); // Không hiển thị văn bản
            } else {
                setIcon(null);
                setText(value != null ? value.toString() : "");
            }
            return this;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbMaPhong;
    private javax.swing.JLabel lbTongTien;
    private javax.swing.JTable tbChiTietSP;
    private javax.swing.JTable tbSanPham;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
