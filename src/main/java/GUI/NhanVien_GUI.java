/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import javax.swing.text.*;
import javax.swing.text.DocumentFilter.FilterBypass;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.toedter.calendar.JDateChooser;

import ConnectDB.ConnectDB;
import DAO.KhachHang_DAO;
import DAO.NhanVien_DAO;
import DAO.TaiKhoan_DAO;
import ENTITY.KhachHang;
import ENTITY.LoaiNhanVien;
import ENTITY.NhanVien;
import UTIL.MaHoa;

/**
 *
 * @author 8483
 */
public class NhanVien_GUI extends javax.swing.JPanel {
	/**
	 * Creates new form NhanVien_GUI
	 */
	public NhanVien_GUI() {
		initComponents();
		loadDataToTable();
		updateHeader();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		titleHoaDon = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tbNhanVien = new javax.swing.JTable();
		btnXoa = new javax.swing.JPanel();
		btnXoa = new RoundedPanel(20);
		lbXoa = new javax.swing.JLabel();
		btnCapNhat = new javax.swing.JPanel();
		btnCapNhat = new RoundedPanel(20);
		lbCapNhat = new javax.swing.JLabel();
		btnThemNhanvien = new javax.swing.JPanel();
		btnThemNhanvien = new RoundedPanel(20);
		lbThemNhanVien = new javax.swing.JLabel();

		setLayout(new java.awt.CardLayout());

		jPanel1.setBackground(new java.awt.Color(255, 255, 255));

		titleHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
		titleHoaDon.setText("Danh sách nhân viên");

		tbNhanVien.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {},
				new String[] { "Mã nhân viên", "Tên nhân viên", "Loại", "Ngày sinh", "Số điện thoại", "Phái" }) {
			Class[] types = new Class[] { java.lang.Object.class, java.lang.String.class, java.lang.Object.class,
					java.lang.String.class, java.lang.Object.class, java.lang.String.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		tbNhanVien.setRowHeight(40);
		jScrollPane1.setViewportView(tbNhanVien);

		btnXoa.setBackground(new java.awt.Color(255, 0, 0));
		btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		lbXoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		lbXoa.setForeground(new java.awt.Color(255, 255, 255));
		lbXoa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lbXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/delete.png"))); // NOI18N
		lbXoa.setText("Xóa");

		javax.swing.GroupLayout btnXoaLayout = new javax.swing.GroupLayout(btnXoa);
		btnXoa.setLayout(btnXoaLayout);
		btnXoaLayout.setHorizontalGroup(btnXoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						btnXoaLayout.createSequentialGroup()
								.addComponent(lbXoa, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
								.addContainerGap()));
		btnXoaLayout.setVerticalGroup(btnXoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						btnXoaLayout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(lbXoa).addContainerGap()));

		btnCapNhat.setBackground(new java.awt.Color(245, 109, 40));
		btnCapNhat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		lbCapNhat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		lbCapNhat.setForeground(new java.awt.Color(255, 255, 255));
		lbCapNhat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lbCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/fixing.png"))); // NOI18N
		lbCapNhat.setText("Cập nhật");

		javax.swing.GroupLayout btnCapNhatLayout = new javax.swing.GroupLayout(btnCapNhat);
		btnCapNhat.setLayout(btnCapNhatLayout);
		btnCapNhatLayout
				.setHorizontalGroup(btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(lbCapNhat, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE));
		btnCapNhatLayout
				.setVerticalGroup(btnCapNhatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								btnCapNhatLayout.createSequentialGroup()
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(lbCapNhat).addContainerGap()));

		btnThemNhanvien.setBackground(new java.awt.Color(25, 159, 254));
		btnThemNhanvien.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		lbThemNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		lbThemNhanVien.setForeground(new java.awt.Color(255, 255, 255));
		lbThemNhanVien.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lbThemNhanVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/add.png"))); // NOI18N
		lbThemNhanVien.setText("Thêm nhân viên");

		javax.swing.GroupLayout btnThemNhanvienLayout = new javax.swing.GroupLayout(btnThemNhanvien);
		btnThemNhanvien.setLayout(btnThemNhanvienLayout);
		btnThemNhanvienLayout
				.setHorizontalGroup(btnThemNhanvienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(btnThemNhanvienLayout.createSequentialGroup().addContainerGap()
								.addComponent(lbThemNhanVien)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		btnThemNhanvienLayout
				.setVerticalGroup(btnThemNhanvienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								btnThemNhanvienLayout.createSequentialGroup()
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(lbThemNhanVien).addContainerGap()));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(titleHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 199,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18).addComponent(btnThemNhanvien,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(12, 12, 12).addComponent(titleHoaDon)
						.addGap(13, 13, 13)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btnThemNhanvien, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(12, 12, 12)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)));

		add(jPanel1, "card2");
	}// </editor-fold>//GEN-END:initComponents

	private void updateHeader() {
		JTableHeader header = tbNhanVien.getTableHeader();
		header.setFont(new Font("Times new Romans", Font.BOLD, 16));
	}

//    Hàm đổ dữ liệu từ database vào JTable
	private void loadDataToTable() {
		NhanVien_DAO nhanVienhDAO = new NhanVien_DAO();
		List<NhanVien> dsNhanVien = nhanVienhDAO.getAllNhanVien();

		// Initialize table model with the correct headers
		DefaultTableModel tableModel = new DefaultTableModel(new Object[][] {}, new String[] { "Mã nhân viên",
				"Tên nhân viên", "Loại Nhân Viên", "Ngày sinh", "CCCD", "Số điện thoại", "Phái" });
		tbNhanVien.setModel(tableModel);

		tableModel.setRowCount(0);

		// Date format for the "Ngày sinh" column
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

		for (NhanVien nv : dsNhanVien) {
			Object[] row = { nv.getMaNhanVien(), nv.getTenNhanVien(), nv.getLoaiNhanVien().toString(), // Ensure you
																										// have a getter
																										// for this
																										// attribute in
																										// NhanVien
					dateFormat.format(nv.getNgaySinh()), nv.getCCCD(), // Assuming nv.getCCCD() fetches the correct data
					nv.getSoDienThoai(), nv.getPhai() };
			tableModel.addRow(row);
		}

		btnXoa.setEnabled(false);
		btnXoa.setBackground(Color.gray);
		btnCapNhat.setEnabled(false);
		btnCapNhat.setBackground(Color.gray);
		btnXoa.setEnabled(false);
		btnCapNhat.setEnabled(false);

		tbNhanVien.getSelectionModel().addListSelectionListener(e -> {
			if (!e.getValueIsAdjusting()) {
				boolean isRowSelected = tbNhanVien.getSelectedRow() != -1;
				btnXoa.setEnabled(isRowSelected);
				btnXoa.setBackground(Color.red);
				btnCapNhat.setEnabled(isRowSelected);
				btnCapNhat.setBackground(Color.orange);
				btnXoa.setEnabled(isRowSelected);
				btnCapNhat.setEnabled(isRowSelected);
			}
		});

		lbXoa.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					deleteEmployee();
					; // Call delete service method
				}
			}
		});
		btnXoa.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					deleteEmployee();
					; // Call delete service method
				}
			}
		});

		// Add mouse click event for "Cập nhật" label
		lbCapNhat.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					updateEmployee();
					; // Call update service dialog method
				}
			}
		});
		btnCapNhat.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					updateEmployee(); // Call update service dialog method
				}
			}
		});

		// "Thêm nhân viên" button
		btnThemNhanvien.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				showAddEmployeeDialog(evt);
			}
		});

		// "Cập Nhật" button
		btnCapNhat.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				updateEmployee();
			}
		});

		// "Xóa" button
		btnXoa.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				deleteEmployee();
			}
		});
	}

	private void deleteEmployee() {
		int selectedRow = tbNhanVien.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Chọn nhân viên ở danh sách bên dưới để xóa.", "Thông báo",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}

		String employeeId = (String) tbNhanVien.getValueAt(selectedRow, 0);
		int confirm = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn xóa nhân viên này?", "Xác nhận xóa",
				JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {
			NhanVien_DAO nhanVienDAO = new NhanVien_DAO();

			try {
				boolean deleted = nhanVienDAO.deleteNhanVien(employeeId);
				if (deleted) {
					loadDataToTable();
					JOptionPane.showMessageDialog(this, "Nhân viên được xóa thành công.", "Thông báo",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên với ID: " + employeeId, "Thông báo",
							JOptionPane.INFORMATION_MESSAGE);
				}
			} catch (Exception e) {
				e.printStackTrace();
				JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi không mong muốn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	// Method to update an existing employee
	private void updateEmployee() {
		int selectedRow = tbNhanVien.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Chọn nhân viên cần cập nhật !");
			return;
		}

		// Retrieve the selected employee ID
		String employeeId = (String) tbNhanVien.getValueAt(selectedRow, 0);
		NhanVien_DAO nhanVienDAO = new NhanVien_DAO();
		NhanVien nhanVien = nhanVienDAO.getNhanVienById(employeeId);

		// Dialog to update employee details
		JDialog updateEmployeeDialog = createUpdateEmployeeDialog(nhanVien, nhanVienDAO);
		updateEmployeeDialog.setVisible(true);
	}

	private JDialog createUpdateEmployeeDialog(NhanVien nhanVien, NhanVien_DAO nhanVienDAO) {
		JDialog updateEmployeeDialog = new JDialog((Frame) null, "Cập Nhật Nhân Viên", true);
		updateEmployeeDialog.setSize(900, 400);
		updateEmployeeDialog.setLocationRelativeTo(null);

		// Create UI components
		JTextField txtMaNhanVien = new JTextField(nhanVien.getMaNhanVien(), 20);
		txtMaNhanVien.setEnabled(false); // Make this field non-editable
		JTextField txtTenNhanVien = new JTextField(nhanVien.getTenNhanVien(), 20);
		JComboBox<LoaiNhanVien> cbLoaiNhanVien = new JComboBox<>(LoaiNhanVien.values());
		cbLoaiNhanVien.setSelectedItem(nhanVien.getLoaiNhanVien());

		JTextField txtCCCD = new JTextField(nhanVien.getCCCD(), 20);
		((AbstractDocument) txtCCCD.getDocument()).setDocumentFilter(new NumericDocumentFilter());

		JDateChooser dateChooserNgaySinh = new JDateChooser();
		dateChooserNgaySinh.setDate(nhanVien.getNgaySinh());
		dateChooserNgaySinh.setDateFormatString("dd/MM/yyyy");

		JTextField txtSoDienThoai = new JTextField(nhanVien.getSoDienThoai(), 20);
		((AbstractDocument) txtSoDienThoai.getDocument()).setDocumentFilter(new NumericDocumentFilter());

		JComboBox<String> cbPhai = new JComboBox<>(new String[] { "Nam", "Nữ", "Khác" });
		cbPhai.setSelectedItem(nhanVien.getPhai());

		JButton btnSave = new JButton("Lưu");
		JButton btnCancel = new JButton("Hủy");
		btnSave.setFont(new Font("Segoe UI", Font.BOLD, 14));
		btnCancel.setFont(new Font("Segoe UI", Font.BOLD, 14));
		btnSave.setBackground(Color.decode("#199FFE"));
		btnSave.setForeground(Color.WHITE);
		btnCancel.setBackground(Color.decode("#D3D3D3"));

		// Set button sizes
		Dimension buttonSize = new Dimension(100, 40);
		btnSave.setPreferredSize(buttonSize);
		btnCancel.setPreferredSize(buttonSize);

		// Layout components
		JPanel formPanel = new JPanel(new GridBagLayout());
		Font labelFont = new Font("Segoe UI", Font.BOLD, 20);
		Font textFieldFont = new Font("Segoe UI", Font.PLAIN, 20);
		Dimension textFieldSize = new Dimension(250, 45);

		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(5, 5, 5, 5);
		gbc.fill = GridBagConstraints.HORIZONTAL;

		// Row 1: Mã nhân viên and Tên nhân viên
		gbc.gridx = 0;
		gbc.gridy = 0;
		JLabel lblMaNhanVien = new JLabel("Mã nhân viên:");
		lblMaNhanVien.setFont(labelFont);
		formPanel.add(lblMaNhanVien, gbc);

		gbc.gridx = 1;
		formPanel.add(txtMaNhanVien, gbc);
		txtMaNhanVien.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		JLabel lblTenNhanVien = new JLabel("Tên nhân viên:");
		lblTenNhanVien.setFont(labelFont);
		formPanel.add(lblTenNhanVien, gbc);

		gbc.gridx = 3;
		formPanel.add(txtTenNhanVien, gbc);
		txtTenNhanVien.setPreferredSize(textFieldSize);

		// Row 2: Loại nhân viên and Giới tính
		gbc.gridx = 0;
		gbc.gridy = 1;
		JLabel lblLoaiNhanVien = new JLabel("Loại nhân viên:");
		lblLoaiNhanVien.setFont(labelFont);
		formPanel.add(lblLoaiNhanVien, gbc);

		gbc.gridx = 1;
		formPanel.add(cbLoaiNhanVien, gbc);
		cbLoaiNhanVien.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		JLabel lblPhai = new JLabel("Giới tính:");
		lblPhai.setFont(labelFont);
		formPanel.add(lblPhai, gbc);

		gbc.gridx = 3;
		formPanel.add(cbPhai, gbc);
		cbPhai.setPreferredSize(textFieldSize);

		// Row 3: Số CCCD and Điện thoại
		gbc.gridx = 0;
		gbc.gridy = 2;
		JLabel lblCCCD = new JLabel("Số CCCD:");
		lblCCCD.setFont(labelFont);
		formPanel.add(lblCCCD, gbc);

		gbc.gridx = 1;
		formPanel.add(txtCCCD, gbc);
		txtCCCD.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		JLabel lblSoDienThoai = new JLabel("Điện thoại:");
		lblSoDienThoai.setFont(labelFont);
		formPanel.add(lblSoDienThoai, gbc);

		gbc.gridx = 3;
		formPanel.add(txtSoDienThoai, gbc);
		txtSoDienThoai.setPreferredSize(textFieldSize);

		// Row 4: Ngày sinh
		gbc.gridx = 0;
		gbc.gridy = 3;
		JLabel lblNgaySinh = new JLabel("Ngày sinh:");
		lblNgaySinh.setFont(labelFont);
		formPanel.add(lblNgaySinh, gbc);

		gbc.gridx = 1;
		formPanel.add(dateChooserNgaySinh, gbc);
		dateChooserNgaySinh.setPreferredSize(textFieldSize);

		// Button panel setup
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);

		// Main panel setup
		JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
		mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		mainPanel.add(formPanel, BorderLayout.CENTER);
		mainPanel.add(buttonPanel, BorderLayout.SOUTH);

		// Button actions
		btnSave.addActionListener(e -> {
			// Gọi hàm updateEmployeeData và kiểm tra xem việc cập nhật có thành công hay
			// không
			if (updateEmployeeData(updateEmployeeDialog, nhanVien, nhanVienDAO, txtTenNhanVien, cbLoaiNhanVien, txtCCCD,
					dateChooserNgaySinh, txtSoDienThoai, cbPhai)) {
				updateEmployeeDialog.dispose(); // Đóng dialog nếu thành công
			}
		});
		btnCancel.addActionListener(e -> updateEmployeeDialog.dispose());

		updateEmployeeDialog.add(mainPanel);
		return updateEmployeeDialog;
	}

	private boolean updateEmployeeData(JDialog dialog, NhanVien nhanVien, NhanVien_DAO nhanVienDAO,
			JTextField txtTenNhanVien, JComboBox<LoaiNhanVien> cbLoaiNhanVien, JTextField txtCCCD,
			JDateChooser dateChooserNgaySinh, JTextField txtSoDienThoai, JComboBox<String> cbPhai) {

		// Lấy dữ liệu từ các trường đầu vào
		String tenNhanVien = txtTenNhanVien.getText().trim();
		LoaiNhanVien loaiNhanVien = (LoaiNhanVien) cbLoaiNhanVien.getSelectedItem();
		String cccd = txtCCCD.getText().trim();
		String soDienThoai = txtSoDienThoai.getText().trim();
		String phai = (String) cbPhai.getSelectedItem();
		Date ngaySinh = dateChooserNgaySinh.getDate();

		// Kiểm tra tính hợp lệ của đầu vào
		if (isInputValid(tenNhanVien, phai, ngaySinh, cccd, soDienThoai)) {
			java.sql.Date sqlNgaySinh = new java.sql.Date(ngaySinh.getTime());

			// Cập nhật thông tin nhân viên
			nhanVien.setTenNhanVien(tenNhanVien);
			nhanVien.setLoaiNhanVien(loaiNhanVien);
			nhanVien.setCCCD(cccd);
			nhanVien.setSoDienThoai(soDienThoai);
			nhanVien.setPhai(phai);
			nhanVien.setNgaySinh(sqlNgaySinh);

			// Cập nhật nhân viên vào cơ sở dữ liệu
			if (nhanVienDAO.updateNhanVien(nhanVien)) {
				loadDataToTable();
				JOptionPane.showMessageDialog(dialog, "Nhân viên được cập nhật thành công.");
				dialog.dispose();
			} else {
				JOptionPane.showMessageDialog(dialog, "Cập nhật không thành công.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			}
		} else {
			JOptionPane.showMessageDialog(dialog, "Vui lòng điền đầy đủ và đúng thông tin.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
		}
		return false;
	}

	// Hàm kiểm tra tính hợp lệ của đầu vào
	private boolean isInputValid(String tenNhanVien, String phai, Date ngaySinh, String cccd, String soDienThoai) {
		if (tenNhanVien.isEmpty() || phai.isEmpty() || ngaySinh == null || cccd.isEmpty() || soDienThoai.isEmpty()) {
			return false;
		}
		if (!soDienThoai.matches("\\d{10,11}")) { // Kiểm tra số điện thoại có đúng định dạng không (10-11 số)
			JOptionPane.showMessageDialog(null, "Số điện thoại phải có từ 10 đến 11 chữ số.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return false;
		}
		if (!cccd.matches("\\d{12}")) { // Kiểm tra CCCD có đúng định dạng 12 chữ số không
			JOptionPane.showMessageDialog(null, "Số CCCD phải có đúng 12 chữ số.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return false;
		}
		return true;
	}

	private boolean isInputValid(String tenNhanVien, String phai, Date ngaySinh, String soDienThoai) {
		return !tenNhanVien.isEmpty() && !phai.isEmpty() && ngaySinh != null && !soDienThoai.isEmpty();
	}

	private java.sql.Date parseDate(String dateString) throws java.text.ParseException {
		java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy");
		Date date = dateFormat.parse(dateString);
		return new java.sql.Date(date.getTime());
	}

	private void updateNhanVien(NhanVien nhanVien, String tenNhanVien, LoaiNhanVien loaiNhanVien, String CCCD,
			String soDienThoai, String phai, java.sql.Date ngaySinh) {
		nhanVien.setTenNhanVien(tenNhanVien);
		nhanVien.setLoaiNhanVien(loaiNhanVien);
		nhanVien.setCCCD(CCCD);
		nhanVien.setSoDienThoai(soDienThoai);
		nhanVien.setPhai(phai);
		nhanVien.setNgaySinh(ngaySinh);
	}

	private javax.swing.JTextField createTextField(String text, boolean editable) {
		javax.swing.JTextField textField = new javax.swing.JTextField(text, 20);
		textField.setEditable(editable);
		return textField;
	}

	private javax.swing.JComboBox<LoaiNhanVien> createComboBox(LoaiNhanVien selectedValue) {
		javax.swing.JComboBox<LoaiNhanVien> comboBox = new javax.swing.JComboBox<>(LoaiNhanVien.values());
		comboBox.setSelectedItem(selectedValue);
		return comboBox;
	}

	private javax.swing.JPanel createFormPanel(javax.swing.JTextField txtMaNhanVien,
			javax.swing.JTextField txtTenNhanVien, javax.swing.JComboBox<LoaiNhanVien> cbLoaiNhanVien,
			JDateChooser dateChooserNgaySinh, javax.swing.JTextField txtCCCD, javax.swing.JTextField txtSoDienThoai,
			JComboBox<String> cbPhai) {
		javax.swing.JPanel formPanel = new javax.swing.JPanel();
		formPanel.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
		gbc.insets = new java.awt.Insets(5, 5, 5, 5);
		gbc.anchor = java.awt.GridBagConstraints.WEST;

		// Adding components to form panel
		addComponent(formPanel, gbc, 0, 0, "Mã Nhân Viên:", txtMaNhanVien);
		addComponent(formPanel, gbc, 0, 1, "Tên Nhân Viên:", txtTenNhanVien);
		addComponent(formPanel, gbc, 0, 2, "Loại Nhân Viên:", cbLoaiNhanVien);
		addComponent(formPanel, gbc, 0, 3, "Ngày Sinh:", dateChooserNgaySinh);
		addComponent(formPanel, gbc, 0, 4, "CCCD:", txtCCCD);
		addComponent(formPanel, gbc, 0, 5, "Số Điện Thoại:", txtSoDienThoai);
		addComponent(formPanel, gbc, 0, 6, "Phái:", cbPhai);

		return formPanel;
	}

	private void addComponent(javax.swing.JPanel panel, java.awt.GridBagConstraints gbc, int gridX, int gridY,
			String labelText, javax.swing.JComponent component) {
		gbc.gridx = gridX;
		gbc.gridy = gridY;
		panel.add(new javax.swing.JLabel(labelText), gbc);
		gbc.gridx = gridX + 1;
		panel.add(component, gbc);
	}

	private javax.swing.JPanel createButtonPanel(javax.swing.JButton btnCancel, javax.swing.JButton btnSave) {
		javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
		buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);
		return buttonPanel;
	}

	public void showAddEmployeeDialog(java.awt.event.MouseEvent evt) {
		// Create a dialog for adding employees
		JDialog addEmployeeDialog = new JDialog((Frame) null, "Thêm Nhân Viên", true);
		addEmployeeDialog.setSize(900, 400);
		addEmployeeDialog.setLocationRelativeTo(null);

		// Create UI components
		JTextField txtTenNhanVien = new JTextField(20);
		JComboBox<LoaiNhanVien> cbLoaiNhanVien = new JComboBox<>(LoaiNhanVien.values());

		JDateChooser dateChooserNgaySinh = new JDateChooser();
		dateChooserNgaySinh.setDateFormatString("dd/MM/yyyy");

		JTextField txtCCCD = new JTextField(20);
		((AbstractDocument) txtCCCD.getDocument()).setDocumentFilter(new NumericDocumentFilter()); // Apply filter
		JTextField txtSoDienThoai = new JTextField(20);
		((AbstractDocument) txtSoDienThoai.getDocument()).setDocumentFilter(new NumericDocumentFilter());

		JTextField txtEmail = new JTextField(20);
		JTextField txtTenDangNhap = new JTextField(20);
		JTextField txtMatKhau = new JTextField(20);

		// Replace JTextField for Gender with JComboBox
		JComboBox<String> cbGioiTinh = new JComboBox<>(new String[] { "Nam", "Nữ", "Khác" });

		JButton btnSave = new JButton("Lưu");
		JButton btnCancel = new JButton("Hủy");
		btnSave.setFont(new Font("Segoe UI", Font.BOLD, 14));
		btnCancel.setFont(new Font("Segoe UI", Font.BOLD, 14));
		btnSave.setBackground(Color.decode("#199FFE"));
		btnSave.setForeground(Color.WHITE);
		btnCancel.setBackground(Color.decode("#D3D3D3"));

		// Set button sizes
		Dimension buttonSize = new Dimension(100, 40);
		btnSave.setPreferredSize(buttonSize);
		btnCancel.setPreferredSize(buttonSize);

		// Layout components
		JPanel formPanel = new JPanel(new GridBagLayout());
		Font labelFont = new Font("Segoe UI", Font.BOLD, 20);
		Font textFieldFont = new Font("Segoe UI", Font.PLAIN, 20);
		Dimension textFieldSize = new Dimension(250, 45);

		// General GridBagConstraints setup
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(5, 5, 5, 5);
		gbc.fill = GridBagConstraints.HORIZONTAL;

		// Row 1: Tên nhân viên and CCCD
		gbc.gridx = 0;
		gbc.gridy = 0;
		JLabel lblTenNhanVien = new JLabel("Tên nhân viên:");
		lblTenNhanVien.setFont(labelFont);
		formPanel.add(lblTenNhanVien, gbc);

		gbc.gridx = 1;
		gbc.gridy = 0;
		formPanel.add(txtTenNhanVien, gbc);
		txtTenNhanVien.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		gbc.gridy = 0;
		JLabel lblCCCD = new JLabel("Số CCCD:");
		lblCCCD.setFont(labelFont);
		formPanel.add(lblCCCD, gbc);

		gbc.gridx = 3;
		gbc.gridy = 0;
		formPanel.add(txtCCCD, gbc);
		txtCCCD.setPreferredSize(textFieldSize);

		// Row 2: Loại nhân viên and Giới tính
		gbc.gridx = 0;
		gbc.gridy = 1;
		JLabel lblLoaiNhanVien = new JLabel("Loại nhân viên:");
		lblLoaiNhanVien.setFont(labelFont);
		formPanel.add(lblLoaiNhanVien, gbc);

		gbc.gridx = 1;
		gbc.gridy = 1;
		formPanel.add(cbLoaiNhanVien, gbc);
		cbLoaiNhanVien.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		gbc.gridy = 1;
		JLabel lblGioiTinh = new JLabel("Giới tính:");
		lblGioiTinh.setFont(labelFont);

		formPanel.add(lblGioiTinh, gbc);

		gbc.gridx = 3;
		gbc.gridy = 1;
		formPanel.add(cbGioiTinh, gbc); // Use JComboBox for Gender
		cbGioiTinh.setPreferredSize(textFieldSize);

		// Row 3: Điện thoại và Tên đăng nhập
		gbc.gridx = 0;
		gbc.gridy = 2;
		JLabel lblSoDienThoai = new JLabel("Điện thoại:");
		lblSoDienThoai.setFont(labelFont);
		formPanel.add(lblSoDienThoai, gbc);

		gbc.gridx = 1;
		gbc.gridy = 2;
		formPanel.add(txtSoDienThoai, gbc);
		txtSoDienThoai.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		gbc.gridy = 2;
		JLabel lblTenDangNhap = new JLabel("Tên đăng nhập:");
		lblTenDangNhap.setFont(labelFont);
		formPanel.add(lblTenDangNhap, gbc);

		gbc.gridx = 3;
		gbc.gridy = 2;
		formPanel.add(txtTenDangNhap, gbc);
		txtTenDangNhap.setPreferredSize(textFieldSize);

		// Row 4: Ngày sinh và mật khẩu
		gbc.gridx = 0;
		gbc.gridy = 3;
		JLabel lblNgaySinh = new JLabel("Ngày sinh:");
		lblNgaySinh.setFont(labelFont);
		formPanel.add(lblNgaySinh, gbc);

		gbc.gridx = 1;
		gbc.gridy = 3;
		formPanel.add(dateChooserNgaySinh, gbc);
		dateChooserNgaySinh.setPreferredSize(textFieldSize);

		gbc.gridx = 2;
		gbc.gridy = 3;
		JLabel lblMatKhau = new JLabel("Mật khẩu:");
		lblMatKhau.setFont(labelFont);
		formPanel.add(lblMatKhau, gbc);

		gbc.gridx = 3;
		gbc.gridy = 3;
		formPanel.add(txtMatKhau, gbc);
		txtMatKhau.setPreferredSize(textFieldSize);
		// Row 5: Email
		gbc.gridx = 0;
		gbc.gridy = 4;
		JLabel lblEmail = new JLabel("Email:");
		lblEmail.setFont(labelFont);
		formPanel.add(lblEmail, gbc);

		gbc.gridx = 1;
		gbc.gridy = 4;
		formPanel.add(txtEmail, gbc);
		txtEmail.setPreferredSize(textFieldSize);

		// Button panel setup
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);

		// Main panel setup
		JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
		mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		mainPanel.add(formPanel, BorderLayout.CENTER);
		mainPanel.add(buttonPanel, BorderLayout.SOUTH);

		btnSave.addActionListener(e -> {
			if (saveEmployeeData(addEmployeeDialog, txtTenNhanVien, cbLoaiNhanVien, dateChooserNgaySinh, txtCCCD,
					txtSoDienThoai, cbGioiTinh, txtEmail, txtTenDangNhap, txtMatKhau)) { // Pass the JComboBox directly
				addEmployeeDialog.dispose();
			}
		});

		addEmployeeDialog.add(mainPanel);
		addEmployeeDialog.setVisible(true);
	}

	// Helper method to add components in formPanel
	private void addFormRow(JPanel panel, GridBagConstraints gbc, int row, String labelText, Component component) {
		gbc.gridx = 0;
		gbc.gridy = row;
		panel.add(new JLabel(labelText), gbc);

		gbc.gridx = 1;
		panel.add(component, gbc);
	}

	private boolean saveTaiKhoanData(JDialog dialog, JTextField txtTenDangNhap, JTextField txtMatKhau,
			JTextField txtEmail) {
		String tenDangNhap = txtTenDangNhap.getText().trim();
		String matKhau = txtMatKhau.getText().trim();
		String email = txtEmail.getText().trim();

// Kiểm tra tên đăng nhập
		if (tenDangNhap.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Tên đăng nhập không được để trống. Vui lòng nhập tên đăng nhập!",
					"Lỗi", JOptionPane.ERROR_MESSAGE);
			txtTenDangNhap.requestFocus();
			return false;
		}

		if (tenDangNhap.length() < 5) {
			JOptionPane.showMessageDialog(dialog, "Tên đăng nhập phải có ít nhất 5 ký tự!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtTenDangNhap.requestFocus();
			return false;
		}

// Kiểm tra mật khẩu
		if (matKhau.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Mật khẩu không được để trống. Vui lòng nhập mật khẩu!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtMatKhau.requestFocus();
			return false;
		}

		if (matKhau.length() < 6) {
			JOptionPane.showMessageDialog(dialog, "Mật khẩu phải có ít nhất 6 ký tự để đảm bảo bảo mật!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtMatKhau.requestFocus();
			return false;
		}

// Kiểm tra email
		if (email.isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Email không được để trống. Vui lòng nhập email!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtEmail.requestFocus();
			return false;
		}

// Chấp nhận nhiều nhà cung cấp email, không giới hạn chỉ Gmail
		String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
		if (!email.matches(emailPattern)) {
			JOptionPane.showMessageDialog(dialog, "Email không hợp lệ. Vui lòng nhập email đúng định dạng!", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			txtEmail.requestFocus();
			return false;
		}

// Nếu tất cả điều kiện hợp lệ, trả về true
		JOptionPane.showMessageDialog(dialog, "Thông tin tài khoản hợp lệ và đã được lưu thành công!", "Thành công",
				JOptionPane.INFORMATION_MESSAGE);
		return true;
	}

	// Save Employee Data with validation and auto-incremented ID
	private boolean saveEmployeeData(JDialog dialog, JTextField txtTenNhanVien, JComboBox<LoaiNhanVien> cbLoaiNhanVien,
			JDateChooser dateChooserNgaySinh, JTextField txtCCCD, JTextField txtSoDienThoai,
			JComboBox<String> cbGioiTinh, JTextField txtEmail, JTextField txtTenDangNhap, JTextField txtMatKhau) {
		String tenNhanVien = txtTenNhanVien.getText().trim();
		LoaiNhanVien loaiNhanVien = (LoaiNhanVien) cbLoaiNhanVien.getSelectedItem();
		Date ngaySinh = dateChooserNgaySinh.getDate();
		// Định dạng ngày sinh thành dd/MM/yy
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String formattedNgaySinh = dateFormat.format(ngaySinh);
		String cccd = txtCCCD.getText().trim();
		String sdt = txtSoDienThoai.getText().trim();
		String phai = cbGioiTinh.getSelectedItem().toString();
		String email = txtEmail.getText().trim();
		String tenDangNhap = txtTenDangNhap.getText().trim();
		String matKhau = txtMatKhau.getText().trim();
		matKhau = MaHoa.toSHA1(matKhau);

// Kiểm tra hợp lệ
		// Kiểm tra trường tên nhân viên không để trống
		if (tenNhanVien == null || tenNhanVien.trim().isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Tên nhân viên không được để trống.");
			return false;
		}

		if (!tenNhanVien.matches("^[\\p{L} ]{3,50}$")) {
			JOptionPane.showMessageDialog(dialog, "Tên nhân viên không hợp lệ.");
			return false;
		}
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.YEAR, -18); // Di chuyển lịch về 18 năm trước
		Date eighteenYearsAgo = calendar.getTime();

		// Kiểm tra ngày sinh không để trống
		if (ngaySinh == null) {
			JOptionPane.showMessageDialog(dialog, "Ngày sinh không được để trống.");
			return false;
		}

		if (ngaySinh.after(eighteenYearsAgo)) {
			JOptionPane.showMessageDialog(dialog, "Nhân viên phải từ 18 tuổi trở lên.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return false;
		}

		// Kiểm tra CCCD không để trống
		if (cccd == null || cccd.trim().isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "CCCD không được để trống.");
			return false;
		}

		if (!cccd.matches("^\\d{12}$")) {
			JOptionPane.showMessageDialog(dialog, "CCCD phải bao gồm 12 chữ số.");
			return false;
		}

		// Kiểm tra số điện thoại không để trống
		if (sdt == null || sdt.trim().isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Số điện thoại không được để trống.");
			return false;
		}

		if (!sdt.matches("^0\\d{9}$")) {
			JOptionPane.showMessageDialog(dialog, "Số điện thoại phải bắt đầu bằng 0 và có 10 chữ số.");
			return false;
		}

		// Kiểm tra phái không để trống
		if (phai == null || phai.trim().isEmpty()) {
			JOptionPane.showMessageDialog(dialog, "Phái không được để trống.");
			return false;
		}

		if (!phai.matches("^(Nam|Nữ|Khác)$")) {
			JOptionPane.showMessageDialog(dialog, "Phái phải là 'Nam' hoặc 'Nữ'.");
			return false;
		}

// Sinh mã nhân viên
		String maNhanVien = generateNewEmployeeId(loaiNhanVien);
		if (maNhanVien == null) {
			JOptionPane.showMessageDialog(dialog, "Lỗi khi tạo mã nhân viên mới.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			return false;
		}
// Sinh mã tài khoản
		String maTaiKhoan = generateNewAccountId();
		if (maTaiKhoan == null) {
			JOptionPane.showMessageDialog(dialog, "Lỗi khi tạo mã tài khoản mới.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		// Kiểm tra xem nhân viên đã tồn tại chưa trước khi lưu
		if (!saveToDatabase(maNhanVien, tenNhanVien, loaiNhanVien, maTaiKhoan, phai, cccd, ngaySinh, sdt)) {
			JOptionPane.showMessageDialog(dialog, "Lỗi lưu nhân viên vào cơ sở dữ liệu.", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			return false;
		}

		// Kiểm tra xem tài khoản có tồn tại không trước khi lưu
		if (!saveToDatabaseTaiKhoan(maTaiKhoan, tenDangNhap, matKhau, email, maNhanVien)) {
			JOptionPane.showMessageDialog(dialog, "Lỗi lưu tài khoản vào cơ sở dữ liệu.", "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			return false;
		}

		// Nếu tất cả lưu thành công, thêm vào bảng
		DefaultTableModel tableModel = (DefaultTableModel) tbNhanVien.getModel();
		tableModel.addRow(new Object[] { maNhanVien, tenNhanVien, loaiNhanVien, formattedNgaySinh, cccd, sdt, phai });
		return true;

	}

	private String generateNewEmployeeId(LoaiNhanVien loaiNhanVien) {
		String prefix = loaiNhanVien == LoaiNhanVien.NV_QUANLY ? "QL" : "NV";
		String maxIdQuery = "SELECT MAX(MaNhanVien) FROM NhanVien WHERE MaNhanVien LIKE ?";

		try (Connection conn = new ConnectDB().getConnection();
				PreparedStatement pstmt = conn.prepareStatement(maxIdQuery)) {

			if (conn == null) {
				JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu.", "Lỗi kết nối",
						JOptionPane.ERROR_MESSAGE);
				return null;
			}

			pstmt.setString(1, prefix + "%");
			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				String lastId = rs.getString(1);

				// Kiểm tra nếu lastId có giá trị hợp lệ và không phải null
				if (lastId != null && lastId.length() > 2) {
					try {
						// Trích xuất số từ mã nhân viên
						int lastNumber = Integer.parseInt(lastId.substring(2)); // Cắt bỏ tiền tố "QL" hoặc "NV"
						return prefix + String.format("%03d", lastNumber + 1); // Tăng số lên 1 và định dạng lại
					} catch (NumberFormatException e) {
						// Nếu có lỗi khi phân tích số, thông báo và thoát
						JOptionPane.showMessageDialog(null, "Lỗi khi phân tích mã nhân viên: " + e.getMessage(), "Lỗi",
								JOptionPane.ERROR_MESSAGE);
						return null;
					}
				}
			}
			// Nếu không có mã nhân viên nào trong cơ sở dữ liệu, bắt đầu từ "001"
			return prefix + "001";
		} catch (SQLException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Lỗi khi truy vấn cơ sở dữ liệu: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

	private String generateNewAccountId() {
		String prefix = "TK";
		String maxIdQuery = "SELECT MAX(MaTaiKhoan) FROM TaiKhoan WHERE MaTaiKhoan LIKE ?";

		try (Connection conn = new ConnectDB().getConnection();
				PreparedStatement pstmt = conn.prepareStatement(maxIdQuery)) {

			if (conn == null) {
				JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu .", "Lỗi kết nối",
						JOptionPane.ERROR_MESSAGE);
				return null;
			}

			pstmt.setString(1, prefix + "%"); // Tìm các mã tài khoản bắt đầu với "TK"
			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				String lastId = rs.getString(1);

				if (lastId != null) {
					// Tách phần số và tăng thêm 1
					int lastNumber = Integer.parseInt(lastId.substring(2)); // Bỏ "TK"
					return prefix + String.format("%03d", lastNumber + 1);
				}
			}

			// Nếu không có mã nào tồn tại, bắt đầu từ TK001
			return prefix + "001";

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	// Method to save employee data to the database
	private boolean saveToDatabaseTaiKhoan(String maTaiKhoan, String tenDangNhap, String matKhau, String email,
			String maNhanVien) {
		String sql = "INSERT INTO TaiKhoan (MaTaiKhoan, TenDangNhap, MatKhau, Email, MaNhanVien) VALUES (?, ?, ?, ?, ?)";

		try (Connection conn = new ConnectDB().getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

			if (conn == null) {
				JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu .", "Lỗi kết nối",
						JOptionPane.ERROR_MESSAGE);
				return false;
			}

			// Gán giá trị cho các placeholder
			pstmt.setString(1, maTaiKhoan);
			pstmt.setString(2, tenDangNhap);
			pstmt.setString(3, matKhau);
			pstmt.setString(4, email);
			pstmt.setString(5, maNhanVien);

			// Thực hiện câu lệnh
			int rowsInserted = pstmt.executeUpdate();
			return rowsInserted > 0; // Trả về true nếu có ít nhất một dòng được thêm

		} catch (SQLException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Lỗi khi truy vấn cơ sở dữ liệu: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
			return false;
		}
	}

	private boolean saveToDatabase(String maNhanVien, String tenNhanVien, LoaiNhanVien loaiNhanVien, String maTaiKhoan,
			String phai, String cccd, Date ngaySinh, String sdt) {
		ConnectDB connectDB = new ConnectDB(); // Create an instance of ConnectDB
		try (Connection conn = connectDB.getConnection()) { // Use the connection from ConnectDB
			if (conn == null) {
				JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu.", "Lỗi kết nối",
						JOptionPane.ERROR_MESSAGE);
				return false;
			}

			String sql = "INSERT INTO NhanVien (MaNhanVien, TenNhanVien, LoaiNhanVien, TaiKhoan, NgaySinh, CCCD, SDT, Phai) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
			try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
				pstmt.setString(1, maNhanVien);
				pstmt.setString(2, tenNhanVien);
				pstmt.setString(3, loaiNhanVien.name()); // Assuming LoaiNhanVien is an enum
				pstmt.setString(4, maTaiKhoan);
				pstmt.setDate(5, new java.sql.Date(ngaySinh.getTime()));
				pstmt.setString(6, cccd);
				pstmt.setString(7, sdt);
				pstmt.setString(8, phai);

				int rowsInserted = pstmt.executeUpdate();
				return rowsInserted > 0; // Return true if at least one row was inserted
			}

		} catch (SQLException e) {
			e.printStackTrace(); // Handle the exception
			return false;
		}
	}

	private static class NumericDocumentFilter extends DocumentFilter {
		@Override
		public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)
				throws BadLocationException {
			if (string != null && string.matches("\\d*")) { // Check if input is numeric
				super.insertString(fb, offset, string, attr);
			}
		}

		@Override
		public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
				throws BadLocationException {
			if (text != null && text.matches("\\d*")) { // Check if input is numeric
				super.replace(fb, offset, length, text, attrs);
			}
		}

		@Override
		public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
			super.remove(fb, offset, length);
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel btnCapNhat;
	private javax.swing.JPanel btnThemNhanvien;
	private javax.swing.JPanel btnXoa;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel lbCapNhat;
	private javax.swing.JLabel lbThemNhanVien;
	private javax.swing.JLabel lbXoa;
	private javax.swing.JTable tbNhanVien;
	private javax.swing.JLabel titleHoaDon;
	// End of variables declaration//GEN-END:variables
}
