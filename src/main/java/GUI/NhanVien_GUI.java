/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.toedter.calendar.JDateChooser;

import ConnectDB.ConnectDB;
import DAO.KhachHang_DAO;
import DAO.NhanVien_DAO;
import ENTITY.KhachHang;
import ENTITY.LoaiNhanVien;
import ENTITY.NhanVien;

/**
 *
 * @author 84837
 */
public class NhanVien_GUI extends javax.swing.JPanel {
	/**
	 * Creates new form NhanVien_GUI
	 */
	public NhanVien_GUI() {
		initComponents();
		loadDataToTable();
		updateHeader();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		titleHoaDon = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tbNhanVien = new javax.swing.JTable();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jPanel4 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();

		setLayout(new java.awt.CardLayout());

		jPanel1.setBackground(new java.awt.Color(255, 255, 255));

		titleHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
		titleHoaDon.setText("Danh sách nhân viên");

		tbNhanVien.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "Mã nhân viên",
				"Tên nhân viên", "Loại Nhân Viên", "Ngày sinh", "CCCD", "Số điện thoại", "Phái" }) {
			Class[] types = new Class[] { java.lang.Object.class, java.lang.String.class, java.lang.Object.class,
					java.lang.String.class, java.lang.Object.class, java.lang.String.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		tbNhanVien.setRowHeight(40);
		jScrollPane1.setViewportView(tbNhanVien);

		jPanel2.setBackground(new java.awt.Color(255, 0, 0));
		jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(255, 255, 255));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/delete.png"))); // NOI18N
		jLabel1.setText("Xóa");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel2Layout.createSequentialGroup()
								.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
								.addContainerGap()));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel2Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jLabel1).addContainerGap()));

		jPanel3.setBackground(new java.awt.Color(245, 109, 40));
		jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel2.setForeground(new java.awt.Color(255, 255, 255));
		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/fixing.png"))); // NOI18N
		jLabel2.setText("Cập nhật");

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel3Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jLabel2).addContainerGap()));

		jPanel4.setBackground(new java.awt.Color(25, 159, 254));
		jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabel3.setForeground(new java.awt.Color(255, 255, 255));
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/add.png"))); // NOI18N
		jLabel3.setText("Thêm nhân viên");

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel4Layout.createSequentialGroup().addContainerGap().addComponent(jLabel3)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel4Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jLabel3).addContainerGap()));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(titleHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 199,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18).addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(12, 12, 12).addComponent(titleHoaDon)
						.addGap(13, 13, 13)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(12, 12, 12)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)));

		add(jPanel1, "card2");
	}// </editor-fold>//GEN-END:initComponents

	private void updateHeader() {
		JTableHeader header = tbNhanVien.getTableHeader();
		header.setFont(new Font("Times new Romans", Font.BOLD, 16));
	}

//    Hàm đổ dữ liệu từ database vào JTable
	private void loadDataToTable() {
		NhanVien_DAO nhanVienhDAO = new NhanVien_DAO();
		List<NhanVien> dsNhanVien = nhanVienhDAO.getAllNhanVien();

		// Initialize table model with the correct headers
		DefaultTableModel tableModel = new DefaultTableModel(new Object[][] {}, new String[] { "Mã nhân viên",
				"Tên nhân viên", "Loại Nhân Viên", "Ngày sinh", "CCCD", "Số điện thoại", "Phái" });
		tbNhanVien.setModel(tableModel);

		tableModel.setRowCount(0);

		// Date format for the "Ngày sinh" column
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

		for (NhanVien nv : dsNhanVien) {
			Object[] row = { nv.getMaNhanVien(), nv.getTenNhanVien(), nv.getLoaiNhanVien().toString(), // Ensure you
																										// have a getter
																										// for this
																										// attribute in
																										// NhanVien
					dateFormat.format(nv.getNgaySinh()), nv.getCCCD(), // Assuming nv.getCCCD() fetches the correct data
					nv.getSoDienThoai(), nv.getPhai() };
			tableModel.addRow(row);
		}

		jLabel1.setEnabled(false);
		jLabel2.setEnabled(false);
		jPanel2.setEnabled(false);
		jPanel3.setEnabled(false);

		tbNhanVien.getSelectionModel().addListSelectionListener(e -> {
			if (!e.getValueIsAdjusting()) {
				boolean isRowSelected = tbNhanVien.getSelectedRow() != -1;
				jLabel1.setEnabled(isRowSelected);
				jLabel2.setEnabled(isRowSelected);
				jPanel2.setEnabled(isRowSelected);
				jPanel3.setEnabled(isRowSelected);
			}
		});

		jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					deleteEmployee();
					; // Call delete service method
				}
			}
		});
		jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					deleteEmployee();
					; // Call delete service method
				}
			}
		});

		// Add mouse click event for "Cập nhật" label
		jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					updateEmployee();
					; // Call update service dialog method
				}
			}
		});
		jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if (tbNhanVien.getSelectedRow() != -1) { // Check if a row is selected
					updateEmployee(); // Call update service dialog method
				}
			}
		});

		// "Thêm nhân viên" button
		jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				showAddEmployeeDialog(evt);
			}
		});

		// "Cập Nhật" button
		jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				updateEmployee();
			}
		});

		// "Xóa" button
		jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				deleteEmployee();
			}
		});
	}

	private void deleteEmployee() {
		int selectedRow = tbNhanVien.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Chọn nhân viên ở danh sách bên dưới để xóa.", "Thông báo",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}

		String employeeId = (String) tbNhanVien.getValueAt(selectedRow, 0);
		int confirm = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn xóa nhân viên này?", "Xác nhận xóa",
				JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {
			NhanVien_DAO nhanVienDAO = new NhanVien_DAO();

			try {
				boolean deleted = nhanVienDAO.deleteNhanVien(employeeId);
				if (deleted) {
					loadDataToTable();
					JOptionPane.showMessageDialog(this, "Nhân viên được xóa thành công.", "Thông báo",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên với ID: " + employeeId, "Thông báo",
							JOptionPane.INFORMATION_MESSAGE);
				}
			} catch (Exception e) {
				e.printStackTrace();
				JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi không mong muốn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	// Method to update an existing employee
	private void updateEmployee() {
		int selectedRow = tbNhanVien.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Chọn nhân viên cần cập nhật !");
			return;
		}

		// Retrieve the selected employee ID
		String employeeId = (String) tbNhanVien.getValueAt(selectedRow, 0);
		NhanVien_DAO nhanVienDAO = new NhanVien_DAO();
		NhanVien nhanVien = nhanVienDAO.getNhanVienById(employeeId);

		// Dialog to update employee details
		JDialog updateEmployeeDialog = createUpdateEmployeeDialog(nhanVien, nhanVienDAO);
		updateEmployeeDialog.setVisible(true);
	}

	private JDialog createUpdateEmployeeDialog(NhanVien nhanVien, NhanVien_DAO nhanVienDAO) {
		JDialog updateEmployeeDialog = new JDialog();
		updateEmployeeDialog.setTitle("Cập Nhật Nhân Viên");
		updateEmployeeDialog.setSize(500, 400);
		updateEmployeeDialog.setLocationRelativeTo(this);
		updateEmployeeDialog.setModal(true);

		// Create UI components
		javax.swing.JTextField txtMaNhanVien = createTextField(nhanVien.getMaNhanVien(), false);
		javax.swing.JTextField txtTenNhanVien = new javax.swing.JTextField(nhanVien.getTenNhanVien(), 20);
		javax.swing.JComboBox<LoaiNhanVien> cbLoaiNhanVien = createComboBox(nhanVien.getLoaiNhanVien());
		javax.swing.JTextField txtCCCD = new javax.swing.JTextField(nhanVien.getCCCD(), 20);
		javax.swing.JTextField txtNgaySinh = new javax.swing.JTextField(
				new java.text.SimpleDateFormat("dd/MM/yyyy").format(nhanVien.getNgaySinh()));
		javax.swing.JTextField txtSoDienThoai = new javax.swing.JTextField(nhanVien.getSoDienThoai(), 20);
		javax.swing.JTextField txtPhai = new javax.swing.JTextField(nhanVien.getPhai(), 20);

		javax.swing.JButton btnSave = new javax.swing.JButton("Lưu");
		javax.swing.JButton btnCancel = new javax.swing.JButton("Hủy");

		// Save button action listener to update data
		btnSave.addActionListener(e -> updateEmployeeData(updateEmployeeDialog, nhanVien, nhanVienDAO, txtTenNhanVien,
				cbLoaiNhanVien, txtCCCD, txtNgaySinh, txtSoDienThoai, txtPhai));

		// Cancel button action listener to close the dialog
		btnCancel.addActionListener(e -> updateEmployeeDialog.dispose());

		// Panel setup
		javax.swing.JPanel formPanel = createFormPanel(txtMaNhanVien, txtTenNhanVien, cbLoaiNhanVien, txtNgaySinh,
				txtCCCD, txtSoDienThoai, txtPhai);
		javax.swing.JPanel buttonPanel = createButtonPanel(btnCancel, btnSave);

		// Main panel setup
		javax.swing.JPanel mainPanel = new javax.swing.JPanel();
		mainPanel.setLayout(new java.awt.BorderLayout(10, 10));
		mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
		mainPanel.add(formPanel, java.awt.BorderLayout.CENTER);
		mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

		updateEmployeeDialog.add(mainPanel);
		return updateEmployeeDialog;
	}

	private void updateEmployeeData(JDialog dialog, NhanVien nhanVien, NhanVien_DAO nhanVienDAO,
			javax.swing.JTextField txtTenNhanVien, javax.swing.JComboBox<LoaiNhanVien> cbLoaiNhanVien,
			javax.swing.JTextField txtCCCD, javax.swing.JTextField txtNgaySinh, javax.swing.JTextField txtSoDienThoai,
			javax.swing.JTextField txtPhai) {
		String tenNhanVien = txtTenNhanVien.getText().trim();
		LoaiNhanVien loaiNhanVien = (LoaiNhanVien) cbLoaiNhanVien.getSelectedItem();
		String ngaySinhStr = txtNgaySinh.getText().trim();
		String CCCD = txtCCCD.getText().trim();
		String soDienThoai = txtSoDienThoai.getText().trim();
		String phai = txtPhai.getText().trim();

		if (isInputValid(tenNhanVien, phai, ngaySinhStr, soDienThoai)) {
			try {
				java.sql.Date ngaySinh = parseDate(ngaySinhStr);
				updateNhanVien(nhanVien, tenNhanVien, loaiNhanVien, CCCD, soDienThoai, phai, ngaySinh);

				if (nhanVienDAO.updateNhanVien(nhanVien)) {
					loadDataToTable();
					JOptionPane.showMessageDialog(this, "Nhân viên được cập nhật thành công.");
					dialog.dispose();
				} else {
					JOptionPane.showMessageDialog(this, "Cập nhật không thành công.", "Lỗi", JOptionPane.ERROR_MESSAGE);
				}
			} catch (java.text.ParseException ex) {
				JOptionPane.showMessageDialog(dialog, "Ngày sinh phải có định dạng dd/MM/yyyy.", "Lỗi định dạng",
						JOptionPane.ERROR_MESSAGE);
			}
		} else {
			JOptionPane.showMessageDialog(dialog, "Vui lòng điền đầy đủ thông tin.", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
		}
	}

	private boolean isInputValid(String tenNhanVien, String phai, String ngaySinhStr, String soDienThoai) {
		return !tenNhanVien.isEmpty() && !phai.isEmpty() && !ngaySinhStr.isEmpty() && !soDienThoai.isEmpty();
	}

	private java.sql.Date parseDate(String dateString) throws java.text.ParseException {
		java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy");
		Date date = dateFormat.parse(dateString);
		return new java.sql.Date(date.getTime());
	}

	private void updateNhanVien(NhanVien nhanVien, String tenNhanVien, LoaiNhanVien loaiNhanVien, String CCCD,
			String soDienThoai, String phai, java.sql.Date ngaySinh) {
		nhanVien.setTenNhanVien(tenNhanVien);
		nhanVien.setLoaiNhanVien(loaiNhanVien);
		nhanVien.setCCCD(CCCD);
		nhanVien.setSoDienThoai(soDienThoai);
		nhanVien.setPhai(phai);
		nhanVien.setNgaySinh(ngaySinh);
	}

	private javax.swing.JTextField createTextField(String text, boolean editable) {
		javax.swing.JTextField textField = new javax.swing.JTextField(text, 20);
		textField.setEditable(editable);
		return textField;
	}

	private javax.swing.JComboBox<LoaiNhanVien> createComboBox(LoaiNhanVien selectedValue) {
		javax.swing.JComboBox<LoaiNhanVien> comboBox = new javax.swing.JComboBox<>(LoaiNhanVien.values());
		comboBox.setSelectedItem(selectedValue);
		return comboBox;
	}

	private javax.swing.JPanel createFormPanel(javax.swing.JTextField txtMaNhanVien,
			javax.swing.JTextField txtTenNhanVien, javax.swing.JComboBox<LoaiNhanVien> cbLoaiNhanVien,
			javax.swing.JTextField txtNgaySinh, javax.swing.JTextField txtCCCD, javax.swing.JTextField txtSoDienThoai,
			javax.swing.JTextField txtPhai) {
		javax.swing.JPanel formPanel = new javax.swing.JPanel();
		formPanel.setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
		gbc.insets = new java.awt.Insets(5, 5, 5, 5);
		gbc.anchor = java.awt.GridBagConstraints.WEST;

		// Adding components to form panel
		addComponent(formPanel, gbc, 0, 0, "Mã Nhân Viên:", txtMaNhanVien);
		addComponent(formPanel, gbc, 0, 1, "Tên Nhân Viên:", txtTenNhanVien);
		addComponent(formPanel, gbc, 0, 2, "Loại Nhân Viên:", cbLoaiNhanVien);
		addComponent(formPanel, gbc, 0, 3, "Ngày Sinh:", txtNgaySinh);
		addComponent(formPanel, gbc, 0, 4, "CCCD:", txtCCCD);
		addComponent(formPanel, gbc, 0, 5, "Số Điện Thoại:", txtSoDienThoai);
		addComponent(formPanel, gbc, 0, 6, "Phái:", txtPhai);

		return formPanel;
	}

	private void addComponent(javax.swing.JPanel panel, java.awt.GridBagConstraints gbc, int gridX, int gridY,
			String labelText, javax.swing.JComponent component) {
		gbc.gridx = gridX;
		gbc.gridy = gridY;
		panel.add(new javax.swing.JLabel(labelText), gbc);
		gbc.gridx = gridX + 1;
		panel.add(component, gbc);
	}

	private javax.swing.JPanel createButtonPanel(javax.swing.JButton btnCancel, javax.swing.JButton btnSave) {
		javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
		buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);
		return buttonPanel;
	}


	public void showAddEmployeeDialog(java.awt.event.MouseEvent evt) {
		// Create a dialog for adding employees
		JDialog addEmployeeDialog = new JDialog((Frame) null, "Thêm Nhân Viên", true);
		addEmployeeDialog.setSize(500, 400);
		addEmployeeDialog.setLocationRelativeTo(null);

		// Create UI components
		JTextField txtTenNhanVien = new JTextField(20);
		JComboBox<LoaiNhanVien> cbLoaiNhanVien = new JComboBox<>(LoaiNhanVien.values());
		JDateChooser dateChooserNgaySinh = new JDateChooser();
		JTextField txtPhai = new JTextField(20);
		JTextField txtCCCD = new JTextField(20);
		JTextField txtSoDienThoai = new JTextField(20);

		JButton btnSave = new JButton("Lưu");
		JButton btnCancel = new JButton("Hủy");

		// Layout components
		JPanel formPanel = new JPanel(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(5, 5, 5, 5);
		gbc.anchor = GridBagConstraints.WEST;
		addFormRow(formPanel, gbc, 0, "Tên Nhân Viên:", txtTenNhanVien);
		addFormRow(formPanel, gbc, 1, "Loại Nhân Viên:", cbLoaiNhanVien);
		addFormRow(formPanel, gbc, 2, "Ngày Sinh:", dateChooserNgaySinh);
		addFormRow(formPanel, gbc, 3, "CCCD:", txtCCCD);
		addFormRow(formPanel, gbc, 4, "Số Điện Thoại:", txtSoDienThoai);
		addFormRow(formPanel, gbc, 5, "Phái:", txtPhai);

		// Button panel setup
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.add(btnCancel);
		buttonPanel.add(btnSave);

		// Main panel setup
		JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
		mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		mainPanel.add(formPanel, BorderLayout.CENTER);
		mainPanel.add(buttonPanel, BorderLayout.SOUTH);

		// Event Listeners
		btnSave.addActionListener(e -> {
			if (saveEmployeeData(addEmployeeDialog, txtTenNhanVien, cbLoaiNhanVien, txtSoDienThoai, txtCCCD,
					dateChooserNgaySinh, txtPhai)) {
				addEmployeeDialog.dispose();
			}
		});
		btnCancel.addActionListener(e -> addEmployeeDialog.dispose());

		addEmployeeDialog.add(mainPanel);
		addEmployeeDialog.setVisible(true);
	}

	// Helper method to add components in formPanel
	private void addFormRow(JPanel panel, GridBagConstraints gbc, int row, String labelText, Component component) {
		gbc.gridx = 0;
		gbc.gridy = row;
		panel.add(new JLabel(labelText), gbc);

		gbc.gridx = 1;
		panel.add(component, gbc);
	}

	// Save Employee Data with validation and auto-incremented ID
	private boolean saveEmployeeData(JDialog dialog, JTextField txtTenNhanVien, JComboBox<LoaiNhanVien> cbLoaiNhanVien,
	        JTextField txtPhai, JTextField txtCCCD, JDateChooser dateChooserNgaySinh, JTextField txtSoDienThoai) {
	    String tenNhanVien = txtTenNhanVien.getText().trim();
	    LoaiNhanVien loaiNhanVien = (LoaiNhanVien) cbLoaiNhanVien.getSelectedItem();
	    String phai = txtPhai.getText().trim();
	    Date ngaySinh = dateChooserNgaySinh.getDate();
	    String cccd = txtCCCD.getText().trim();
	    String sdt = txtSoDienThoai.getText().trim();

	    if (tenNhanVien.isEmpty() || phai.isEmpty() || sdt.isEmpty() || cccd.isEmpty() || ngaySinh == null) {
	        JOptionPane.showMessageDialog(dialog, "Vui lòng điền đầy đủ thông tin.", "Thông báo",
	                JOptionPane.WARNING_MESSAGE);
	        return false;
	    }

	    // Lấy mã nhân viên mới tự động từ cơ sở dữ liệu
	    String maNhanVien = generateNewEmployeeId(loaiNhanVien);
	    if (maNhanVien == null) {
	        JOptionPane.showMessageDialog(dialog, "Lỗi khi tạo mã nhân viên mới.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	        return false;
	    }

	    // Lưu dữ liệu vào cơ sở dữ liệu
	    if (saveToDatabase(maNhanVien, tenNhanVien, loaiNhanVien, cccd, sdt, ngaySinh, phai)) {
	        // Thêm dòng mới vào bảng với thứ tự hoán đổi
	        DefaultTableModel tableModel = (DefaultTableModel) tbNhanVien.getModel();
	        tableModel.addRow(new Object[] { maNhanVien, tenNhanVien, loaiNhanVien, ngaySinh, cccd, phai, sdt });
	        return true;
	    } else {
	        JOptionPane.showMessageDialog(dialog, "Lỗi lưu dữ liệu vào cơ sở dữ liệu.", "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	        return false;
	    }
	}


	private String generateNewEmployeeId(LoaiNhanVien loaiNhanVien) {
	    String prefix = loaiNhanVien == LoaiNhanVien.NV_QUANLY ? "QL" : "NV";
	    String maxIdQuery = "SELECT MAX(MaNhanVien) FROM NhanVien WHERE MaNhanVien LIKE ?";

	    ConnectDB connectDB = new ConnectDB(); // Tạo đối tượng kết nối DB
	    try (Connection conn = connectDB.getConnection(); 
	         PreparedStatement pstmt = conn.prepareStatement(maxIdQuery)) {

	        if (conn == null) {
	            JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu.", "Lỗi kết nối",
	                    JOptionPane.ERROR_MESSAGE);
	            return null;
	        }

	        // Thiết lập mẫu tìm kiếm với tiền tố
	        pstmt.setString(1, prefix + "%");

	        // Thực hiện truy vấn
	        ResultSet rs = pstmt.executeQuery();
	        if (rs.next()) {
	            String lastId = rs.getString(1);

	            if (lastId != null) {
	                // Tách phần số từ mã hiện tại và tăng thêm 1
	                int lastNumber = Integer.parseInt(lastId.substring(2));
	                return prefix + String.format("%03d", lastNumber + 1);
	            }
	        }

	        // Nếu không có mã nào, bắt đầu từ 001
	        return prefix + "001";

	    } catch (SQLException e) {
	        e.printStackTrace();
	        return null;
	    }
	}


	// Method to save employee data to the database
	private boolean saveToDatabase(String maNhanVien, String tenNhanVien, LoaiNhanVien loaiNhanVien, String phai,
			String cccd, Date ngaySinh, String sdt) {
		ConnectDB connectDB = new ConnectDB(); // Create an instance of ConnectDB
		try (Connection conn = connectDB.getConnection()) { // Use the connection from ConnectDB
			if (conn == null) {
				JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu.", "Lỗi kết nối",
						JOptionPane.ERROR_MESSAGE);
				return false;
			}

			String sql = "INSERT INTO NhanVien (MaNhanVien, TenNhanVien, LoaiNhanVien, NgaySinh, CCCD, SDT, Phai) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?)";
			try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
				pstmt.setString(1, maNhanVien);
				pstmt.setString(2, tenNhanVien);
				pstmt.setString(3, loaiNhanVien.name()); // Assuming LoaiNhanVien is an enum
				pstmt.setDate(4, new java.sql.Date(ngaySinh.getTime()));
				pstmt.setString(5, phai);
				pstmt.setString(6, sdt);
				pstmt.setString(7, cccd);

				int rowsInserted = pstmt.executeUpdate();
				return rowsInserted > 0; // Return true if at least one row was inserted
			}

		} catch (SQLException e) {
			e.printStackTrace(); // Handle the exception
			return false;
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable tbNhanVien;
	private javax.swing.JLabel titleHoaDon;
	// End of variables declaration//GEN-END:variables
}
